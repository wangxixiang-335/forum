{"version":3,"mappings":";kVA4CO,MAAMA,GAAiBC,GAAY,SAAU,IAAM,CACxD,MAAMC,EAAgBC,EAAoB,EAAE,EACtCC,EAAYD,EAAI,EAAK,EACrBE,EAAcF,EAAI,EAAE,EACpBG,EAAUH,EAAmB,CACjC,KAAM,MACN,OAAQ,YACR,UAAW,MACX,KAAM,EAAC,CACR,EACKI,EAAeJ,EAAI,CAAC,EACpBK,EAAcL,EAAI,CAAC,EACnBM,EAAWN,EAAI,EAAE,EAGjBO,EAAe,MAAOC,EAAeC,EAAO,IAAM,CACtD,GAAI,CAACD,EAAM,OACT,OAAAT,EAAc,MAAQ,GACtBK,EAAa,MAAQ,EACd,CAAE,QAAS,GAAM,KAAM,EAAC,EAGjCH,EAAU,MAAQ,GAClBC,EAAY,MAAQM,EACpBH,EAAY,MAAQI,EAEpB,GAAI,CACF,MAAMC,GAAUD,EAAO,GAAKH,EAAS,MACrC,IAAIK,EAA0B,GAC1BC,EAAa,EAKjB,GAHA,QAAQ,IAAI,qBAAsB,CAAE,MAAAJ,EAAO,KAAAC,EAAM,KAAMN,EAAQ,MAAM,KAAM,EAGvEA,EAAQ,MAAM,OAAS,OAASA,EAAQ,MAAM,OAAS,QAAS,CAClE,MAAMU,EAAc,MAAMC,EAAYN,EAAO,CAAC,EAC9CG,EAAUA,EAAQ,OAAOE,EAAY,IAAI,EACrCV,EAAQ,MAAM,OAAS,QACzBS,EAAaC,EAAY,MAEzBD,GAAcC,EAAY,MAE5B,QAAQ,IAAI,uBAAwB,CAAE,MAAOA,EAAY,MAAO,WAAYA,EAAY,KAAK,OAAQ,CACvG,CAEA,GAAIV,EAAQ,MAAM,OAAS,OAASA,EAAQ,MAAM,OAAS,QAAS,CAClE,MAAMY,EAAc,MAAMC,EAAYR,EAAO,CAAC,EAC9CG,EAAUA,EAAQ,OAAOI,EAAY,IAAI,EACrCZ,EAAQ,MAAM,OAAS,QACzBS,EAAaG,EAAY,MAEzBH,GAAcG,EAAY,MAE5B,QAAQ,IAAI,uBAAwB,CAAE,MAAOA,EAAY,MAAO,WAAYA,EAAY,KAAK,OAAQ,CACvG,CAEA,GAAIZ,EAAQ,MAAM,OAAS,OAASA,EAAQ,MAAM,OAAS,WAAY,CACrE,MAAMc,EAAiB,MAAMC,EAAeV,EAAO,CAAC,EACpDG,EAAUA,EAAQ,OAAOM,EAAe,IAAI,EACxCd,EAAQ,MAAM,OAAS,WACzBS,EAAaK,EAAe,MAE5BL,GAAcK,EAAe,MAE/B,QAAQ,IAAI,uBAAwB,CAAE,MAAOA,EAAe,MAAO,WAAYA,EAAe,KAAK,OAAQ,CAC7G,CAEA,QAAQ,IAAI,uBAAwB,CAAE,WAAAL,EAAY,cAAeD,EAAQ,OAAQ,EAGjFA,EAAUQ,EAAaR,CAAO,EAG9B,MAAMS,EAAmBT,EAAQ,MAAMD,EAAQA,EAASJ,EAAS,KAAK,EAEtE,OAAAP,EAAc,MAAQqB,EACtBhB,EAAa,MAAQQ,EAErB,QAAQ,IAAI,qBAAsB,CAAE,WAAAA,EAAY,uBAAwBQ,EAAiB,OAAQ,EAE1F,CAAE,QAAS,GAAM,KAAMA,EAAkB,MAAOR,CAAA,CACzD,OAASS,EAAY,CACnB,eAAQ,MAAM,QAASA,CAAK,EACrB,CAAE,QAAS,GAAO,MAAOC,GAAoBD,CAAK,EAC3D,SACEpB,EAAU,MAAQ,EACpB,CACF,EAGMa,EAAc,MAAON,EAAeE,EAAS,IAAM,CACvD,GAAI,CACF,IAAIa,EAAeC,EAChB,KAAK,OAAO,EACZ,OAAO;AAAA;AAAA;AAAA,UAGL,CAAE,MAAO,QAAS,EAGvB,MAAMC,EAAmB,GACrBjB,EAAM,SACRiB,EAAiB,KAAK,gBAAgBjB,CAAK,GAAG,EAC9CiB,EAAiB,KAAK,kBAAkBjB,CAAK,GAAG,GAI9CL,EAAQ,MAAM,MAAQA,EAAQ,MAAM,KAAK,OAAS,GACpDsB,EAAiB,KAAK,YAAYtB,EAAQ,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG,EAInE,MAAMuB,EAAaC,EAAA,EACfD,GACFD,EAAiB,KAAK,kBAAkBC,EAAW,KAAK,EAAE,EAGxDD,EAAiB,OAAS,IAC5BF,EAAeA,EAAa,GAAGE,EAAiB,KAAK,GAAG,CAAC,GAI3DF,EAAeK,EAAiBL,CAAY,EAG5CA,EAAeA,EAAa,MAAMb,EAAQA,EAASJ,EAAS,MAAQ,CAAC,EAErE,KAAM,CAAE,KAAAuB,EAAM,MAAAR,EAAO,MAAAS,CAAA,EAAU,MAAMC,EAAU,IAAMR,CAAY,EAEjE,GAAIF,EAAO,MAAMA,EAyBjB,MAAO,CAAE,MAvBwBQ,GAAQ,IAAI,IAAIG,GAAQ,WACvD,QAAQ,IAAI,sBAAuBA,CAAI,EACvC,MAAMC,EAAS,CACb,KAAM,OACN,GAAID,EAAK,GACT,MAAOA,EAAK,MACZ,QAASA,EAAK,QACd,WAAYA,EAAK,WACjB,WAAYA,EAAK,WACjB,QAASA,EAAK,QACd,UAAUE,EAAAF,EAAK,WAAL,YAAAE,EAAe,SACzB,YAAYC,EAAAH,EAAK,WAAL,YAAAG,EAAe,WAC3B,OAAOC,EAAAJ,EAAK,WAAL,YAAAI,EAAe,MACtB,WAAYJ,EAAK,WACjB,cAAeA,EAAK,cACpB,WAAYA,EAAK,WACjB,KAAMA,EAAK,KACX,UAAWA,EAAK,WAElB,eAAQ,IAAI,sBAAuBC,CAAM,EAClCA,CACT,CAAC,EAEuB,MAAOH,GAAS,EAC1C,OAAST,EAAY,CACnB,cAAQ,MAAM,UAAWA,CAAK,EACxBA,CACR,CACF,EAGML,EAAc,MAAOR,EAAeE,EAAS,IAAM,CACvD,GAAI,CACF,IAAIa,EAAeC,EAChB,KAAK,UAAU,EAChB,OAAO,IAAK,CAAE,MAAO,QAAS,EAG5BhB,EAAM,SACRe,EAAeA,EAAa,MAAM,WAAY,IAAIf,CAAK,GAAG,GAI5De,EAAeA,EAAa,MAAM,oBAAqB,CAAE,UAAW,GAAO,EAG3EA,EAAeA,EAAa,MAAMb,EAAQA,EAASJ,EAAS,MAAQ,CAAC,EAErE,KAAM,CAAE,KAAAuB,EAAM,MAAAR,EAAO,MAAAS,CAAA,EAAU,MAAMC,EAAU,IAAMR,CAAY,EAEjE,GAAIF,EAAO,MAAMA,EAiBjB,MAAO,CAAE,MAfwBQ,GAAQ,IAAI,IAAIQ,IAAS,CACxD,KAAM,OACN,GAAIA,EAAK,GACT,QAAS,MAAMA,EAAK,KAAK,UAAUA,EAAK,iBAAiB,GACzD,WAAYA,EAAK,WACjB,WAAYA,EAAK,WACjB,UAAW,CACT,GAAIA,EAAK,GACT,SAAUA,EAAK,SACf,WAAYA,EAAK,WACjB,MAAOA,EAAK,MACZ,kBAAmBA,EAAK,kBAC1B,EACA,EAEsB,MAAOP,GAAS,EAC1C,OAAST,EAAY,CACnB,cAAQ,MAAM,UAAWA,CAAK,EACxBA,CACR,CACF,EAGMH,EAAiB,MAAOV,EAAeE,EAAS,IAAM,CAC1D,GAAI,CACF,IAAIa,EAAeC,EAChB,KAAK,UAAU,EACf,OAAO;AAAA;AAAA;AAAA;AAAA,UAIL,CAAE,MAAO,QAAS,EAGnBhB,EAAM,SACRe,EAAeA,EAAa,MAAM,UAAW,IAAIf,CAAK,GAAG,GAI3D,MAAMkB,EAAaC,EAAA,EACfD,IACFH,EAAeA,EAAa,OAAO,aAAcG,EAAW,SAAUA,EAAW,KAAK,GAIxFH,EAAee,EAAoBf,CAAY,EAG/CA,EAAeA,EAAa,MAAMb,EAAQA,EAASJ,EAAS,MAAQ,CAAC,EAErE,KAAM,CAAE,KAAAuB,EAAM,MAAAR,EAAO,MAAAS,CAAA,EAAU,MAAMC,EAAU,IAAMR,CAAY,EAEjE,GAAIF,EAAO,MAAMA,EAkBjB,MAAO,CAAE,MAhBwBQ,GAAQ,IAAI,IAAIU,GAAA,aAAY,OAC3D,KAAM,UACN,GAAIA,EAAQ,GACZ,QAASA,EAAQ,QACjB,WAAYA,EAAQ,WACpB,WAAYA,EAAQ,WACpB,QAASA,EAAQ,QACjB,UAAUL,EAAAK,EAAQ,WAAR,YAAAL,EAAkB,SAC5B,YAAYC,EAAAI,EAAQ,WAAR,YAAAJ,EAAkB,WAC9B,OAAOC,EAAAG,EAAQ,WAAR,YAAAH,EAAkB,MACzB,WAAYG,EAAQ,WACpB,QAASA,EAAQ,QACjB,YAAYC,EAAAD,EAAQ,QAAR,YAAAC,EAAe,MAC3B,UAAWD,EAAQ,WACnB,EAEsB,MAAOT,GAAS,EAC1C,OAAST,EAAY,CACnB,cAAQ,MAAM,UAAWA,CAAK,EACxBA,CACR,CACF,EAGMM,EAAgB,IAAM,CAC1B,MAAMc,MAAU,KAChB,OAAQtC,EAAQ,MAAM,WACpB,IAAK,QACH,MAAO,CAAE,SAAU,MAAO,MAAO,IAAI,KAAKsC,EAAI,SAAS,EAAG,EAAG,EAAG,CAAC,CAAC,EAAE,aAAY,EAClF,IAAK,OACH,MAAO,CAAE,SAAU,MAAO,MAAO,IAAI,KAAKA,EAAI,QAAQA,EAAI,UAAY,CAAC,CAAC,EAAE,aAAY,EACxF,IAAK,QACH,MAAO,CAAE,SAAU,MAAO,MAAO,IAAI,KAAKA,EAAI,SAASA,EAAI,WAAa,CAAC,CAAC,EAAE,aAAY,EAC1F,IAAK,OACH,MAAO,CAAE,SAAU,MAAO,MAAO,IAAI,KAAKA,EAAI,YAAYA,EAAI,cAAgB,CAAC,CAAC,EAAE,aAAY,EAChG,QACE,OAAO,KAEb,EAGMb,EAAoBL,GAAsB,CAC9C,OAAQpB,EAAQ,MAAM,QACpB,IAAK,SACH,OAAOoB,EAAa,MAAM,aAAc,CAAE,UAAW,GAAO,EAC9D,IAAK,SACH,OAAOA,EAAa,MAAM,aAAc,CAAE,UAAW,GAAM,EAC7D,IAAK,aACH,OAAOA,EAAa,MAAM,aAAc,CAAE,UAAW,GAAO,EAC9D,IAAK,iBACH,OAAOA,EAAa,MAAM,gBAAiB,CAAE,UAAW,GAAO,EACjE,IAAK,cACH,OAAOA,EAAa,MAAM,aAAc,CAAE,UAAW,GAAO,EAC9D,IAAK,YACL,QAEE,OAAOA,EAAa,MAAM,YAAa,CAAE,UAAW,GAAO,EAAE,MAAM,aAAc,CAAE,UAAW,GAAO,EAE3G,EAGMe,EAAuBf,GAAsB,CACjD,OAAQpB,EAAQ,MAAM,QACpB,IAAK,SACH,OAAOoB,EAAa,MAAM,aAAc,CAAE,UAAW,GAAO,EAC9D,IAAK,SACH,OAAOA,EAAa,MAAM,aAAc,CAAE,UAAW,GAAM,EAC7D,IAAK,aACH,OAAOA,EAAa,MAAM,aAAc,CAAE,UAAW,GAAO,EAC9D,IAAK,YACL,QACE,OAAOA,EAAa,MAAM,aAAc,CAAE,UAAW,GAAO,EAElE,EAGMJ,EAAgBR,GAA4B,CAChD,OAAQR,EAAQ,MAAM,QACpB,IAAK,SACH,OAAOQ,EAAQ,KAAK,CAAC+B,EAAGC,IAAM,IAAI,KAAKA,EAAE,UAAU,EAAE,UAAY,IAAI,KAAKD,EAAE,UAAU,EAAE,SAAS,EACnG,IAAK,SACH,OAAO/B,EAAQ,KAAK,CAAC+B,EAAGC,IAAM,IAAI,KAAKD,EAAE,UAAU,EAAE,UAAY,IAAI,KAAKC,EAAE,UAAU,EAAE,SAAS,EACnG,IAAK,aACH,OAAOhC,EAAQ,KAAK,CAAC+B,EAAGC,KAAOA,EAAE,YAAc,IAAMD,EAAE,YAAc,EAAE,EACzE,IAAK,iBACH,OAAO/B,EAAQ,KAAK,CAAC+B,EAAGC,KAAOA,EAAE,eAAiB,IAAMD,EAAE,eAAiB,EAAE,EAC/E,IAAK,cACH,OAAO/B,EAAQ,KAAK,CAAC+B,EAAGC,KAAOA,EAAE,YAAc,IAAMD,EAAE,YAAc,EAAE,EACzE,IAAK,YACL,QACE,OAAO/B,CAAA,CAEb,EAiDA,MAAO,CACL,cAAAZ,EACA,UAAAE,EACA,YAAAC,EACA,QAAAC,EACA,aAAAC,EACA,YAAAC,EACA,SAAAC,EACA,aAAAC,EACA,YAAAO,EACA,YAAAE,EACA,eAAAE,EACA,cA1DqB0B,GAAuC,CAC5DzC,EAAQ,MAAQ,CAAE,GAAGA,EAAQ,MAAO,GAAGyC,CAAA,CACzC,EAyDE,aAtDmB,IAAM,CACzB7C,EAAc,MAAQ,GACtBG,EAAY,MAAQ,GACpBE,EAAa,MAAQ,EACrBC,EAAY,MAAQ,CACtB,EAkDE,eA/CqB,MAAOwC,EAAQ,KAAO,CAC3C,GAAI,CACF,KAAM,CAAE,KAAAhB,EAAM,MAAAR,CAAA,EAAU,MAAMU,EAAU,IACtCP,EACG,KAAK,OAAO,EACZ,OAAO,MAAM,EACb,IAAI,OAAQ,KAAM,IAAI,EACtB,MAAM,GAAI,GAGf,GAAIH,EAAO,MAAMA,EAGjB,MAAMyB,EAAuC,GAC7C,OAAAjB,GAAA,MAAAA,EAAM,QAAQG,GAAQ,QACpBE,EAAAF,EAAK,OAAL,MAAAE,EAAW,QAAQa,GAAO,CACxBD,EAAUC,CAAG,GAAKD,EAAUC,CAAG,GAAK,GAAK,CAC3C,EACF,GAQO,CAAE,QAAS,GAAM,KALJ,OAAO,QAAQD,CAAS,EACzC,KAAK,CAAC,EAAGJ,CAAC,EAAG,EAAGC,CAAC,IAAMA,EAAID,CAAC,EAC5B,MAAM,EAAGG,CAAK,EACd,IAAI,CAAC,CAACE,EAAKjB,CAAK,KAAO,CAAE,IAAAiB,EAAK,MAAAjB,GAAQ,CAEX,CAChC,OAAST,EAAY,CACnB,eAAQ,MAAM,YAAaA,CAAK,EACzB,CAAE,QAAS,GAAO,MAAOC,GAAoBD,CAAK,EAC3D,CACF,CAgBE,CAEJ,CAAC,shCCnTD,MAAM2B,EAAe,CAACC,EAAcC,IAC9BD,EAAK,QAAUC,EAAkBD,EAC9BA,EAAK,UAAU,EAAGC,CAAS,EAAI,MAGlCC,EAAcC,GAAsB,CACxC,MAAMC,EAAO,IAAI,KAAKD,CAAS,EAEzBE,MADU,OACG,UAAYD,EAAK,UAC9BE,EAAW,KAAK,MAAMD,EAAS,GAAK,EACpCE,EAAY,KAAK,MAAMF,EAAS,IAAO,EACvCG,EAAW,KAAK,MAAMH,EAAS,KAAQ,EAE7C,OAAIC,EAAW,EAAU,KACrBA,EAAW,GAAW,GAAGA,CAAQ,MACjCC,EAAY,GAAW,GAAGA,CAAS,MACnCC,EAAW,EAAU,GAAGA,CAAQ,KAE7BJ,EAAK,mBAAmB,QAAS,CACtC,KAAM,UACN,MAAO,QACP,IAAK,UACN,CACH,qCAzJEK,EAgHM,OAhHD,MAAM,qBAAsB,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEC,QAAK,QAAUC,EAAA,MAAM,KAEhDA,EAAA,OAAO,OAAI,QAAtBC,IAAAL,EA4CM,MA5CNM,GA4CM,CA3CJC,EAOM,MAPNC,GAOM,CANJP,EAAA,KAAAA,EAAA,GAAAM,EAAoD,QAA9C,MAAM,gCAA+B,KAAE,KAC7CA,EAAgD,KAAhDE,GAAgDC,EAApBN,EAAA,OAAO,KAAK,KAC7BA,EAAA,OAAO,WAAlBC,EAAA,EAAAL,EAGM,MAHNW,GAGM,IAAAV,EAAA,KAAAA,EAAA,IAFJM,EAA8B,KAA3B,MAAM,kBAAgB,WAAK,OAEhC,oBAGFA,EAAqE,IAArEK,GAAqEF,EAAxCpB,EAAac,EAAA,OAAO,QAAO,SAExDG,EAqBM,MArBNM,GAqBM,CApBJN,EAIM,MAJNO,GAIM,CAHJC,EAAuCC,EAAA,CAA1B,KAAMZ,EAAA,OAAQ,KAAK,uBAChCG,EAAmD,OAAnDU,GAAmDP,EAAzBN,EAAA,OAAO,QAAQ,KACzCG,EAAqD,OAArDW,GAAyB,MAAGR,EAAGN,EAAA,OAAO,KAAK,OAG7CG,EAaM,MAbNY,GAaM,CAZJZ,EAGO,OAHPa,GAGO,aAFLb,EAA2B,KAAxB,MAAM,eAAa,YAAK,IAC3BG,EAAGN,EAAA,OAAO,UAAU,OAEtBG,EAGO,OAHPc,GAGO,aAFLd,EAA0B,KAAvB,MAAM,cAAY,YAAK,IAC1BG,EAAGN,EAAA,OAAO,aAAa,OAEzBG,EAGO,OAHPe,GAGO,aAFLf,EAAyB,KAAtB,MAAM,aAAW,YAAK,IACzBG,EAAGN,EAAA,OAAO,UAAU,WAKfA,EAAA,OAAO,MAAQA,SAAO,KAAK,OAAM,GAA5CC,EAAA,EAAAL,EAIM,MAJNuB,GAIM,EAHJlB,EAAA,IAAAL,EAEOwB,SAFapB,EAAA,OAAO,KAAK,WAAnBf,QAAbW,EAEO,QAFuC,IAAKX,EAAK,MAAM,OAAM,OAC9DA,CAAG,yBAIXkB,EAEM,MAFNkB,GAEMf,EADDjB,EAAWW,EAAA,OAAO,UAAU,SAKnBA,EAAA,OAAO,OAAI,QAA3BC,IAAAL,EA0BM,MA1BN0B,GA0BM,CAzBJnB,EAGM,MAHNoB,GAGM,CAFJ1B,EAAA,KAAAA,EAAA,GAAAM,EAAoD,QAA9C,MAAM,gCAA+B,KAAE,KAC7CA,EAA8D,KAA9DqB,GAA8DlB,GAAlClC,EAAA4B,SAAO,YAAP,YAAA5B,EAAkB,QAAQ,OAGxD+B,EAeM,MAfNsB,GAeM,CAdJd,EAAiDC,EAAA,CAApC,KAAMZ,EAAA,OAAO,UAAW,KAAK,uBAC1CG,EAYM,MAZNuB,GAYM,CAXJvB,EAA4C,IAA5CwB,GAA4CrB,EAArBN,EAAA,OAAO,OAAO,KACrCG,EASM,MATNyB,GASM,CARJzB,EAGO,OAHP0B,GAGO,aAFL1B,EAA4B,KAAzB,MAAM,gBAAc,UAAK2B,EAAA,OACzBxB,GAAGjC,EAAA2B,EAAA,OAAO,YAAP,YAAA3B,EAAkB,KAAK,OAE/B8B,EAGO,OAHP4B,GAGO,aAFL5B,EAA0B,KAAvB,MAAM,cAAY,UAAK2B,EAAA,OACvBxD,EAAA0B,EAAA,OAAO,YAAP,YAAA1B,EAAkB,iBAAiB,EAAG,QAC3C,WAKN6B,EAEM,MAFN6B,GAAyB,UAChB3C,EAAWW,EAAA,OAAO,UAAU,SAKvBA,EAAA,OAAO,OAAI,WAA3BC,IAAAL,EAiCM,MAjCNqC,GAiCM,CAhCJ9B,EAKM,MALN+B,GAKM,CAJJrC,EAAA,KAAAA,EAAA,GAAAM,EAAuD,QAAjD,MAAM,mCAAkC,KAAE,KAChDA,EAEK,KAFLgC,GAAyB,SAClB7B,EAAGN,EAAA,OAAO,UAAU,OAI7BG,EAAqE,IAArEiC,GAAqE9B,EAAxCpB,EAAac,EAAA,OAAO,QAAO,SAExDG,EAaM,MAbNkC,GAaM,CAZJlC,EAIM,MAJNmC,GAIM,CAHJ3B,EAAuCC,EAAA,CAA1B,KAAMZ,EAAA,OAAQ,KAAK,uBAChCG,EAAmD,OAAnDoC,GAAmDjC,EAAzBN,EAAA,OAAO,QAAQ,KACzCG,EAAqD,OAArDqC,GAAyB,MAAGlC,EAAGN,EAAA,OAAO,KAAK,OAGlCA,EAAA,OAAO,WAAU,GAA5BC,IAAAL,EAKM,MALN6C,GAKM,CAJJtC,EAGO,OAHPuC,GAGO,eAFLvC,EAA2B,KAAxB,MAAM,eAAa,YAAK,IAC3BG,EAAGN,EAAA,OAAO,UAAU,qBAKfA,EAAA,OAAO,WAAlBC,EAAA,EAAAL,EAGM,MAHN+C,GAGM,IAAA9C,EAAA,MAAAA,EAAA,KAFJM,EAA2B,KAAxB,MAAM,eAAa,WAAK,SAE7B,kBAEAA,EAEM,MAFNyC,GAEMtC,EADDjB,EAAWW,EAAA,OAAO,UAAU,42BCmFvC,MAAM6C,EAASC,GAAA,EACTC,EAAchH,GAAA,EAGdiH,EAAc9G,EAAA,EACdE,EAAcF,EAAI,EAAE,EACpB+G,EAAc/G,EAAW,EAAE,EAC3BgH,EAAahH,EAAI,CAAC,EAGlB,CACJ,cAAAD,EACA,UAAAE,EACA,aAAAM,EACA,aAAA0G,EACA,eAAAC,CAAA,EACEL,EAGEM,EAAaC,EAAS,IAAM,CAChC,MAAMnF,EAAS,KAAK,KAAK4E,EAAY,aAAeA,EAAY,QAAQ,EACxE,eAAQ,IAAI,iBAAkB,CAAE,aAAcA,EAAY,aAAc,SAAUA,EAAY,SAAU,OAAA5E,CAAA,CAAQ,EACzGA,CACT,CAAC,EAEKoF,EAAiBD,EAAS,IAAM,CACpC,MAAME,EAAQ,GACRC,EAAQ,KAAK,IAAI,EAAGV,EAAY,YAAc,CAAC,EAC/CW,EAAM,KAAK,IAAIL,EAAW,MAAON,EAAY,YAAc,CAAC,EAElE,QAASY,EAAIF,EAAOE,GAAKD,EAAKC,IAC5BH,EAAM,KAAKG,CAAC,EAGd,OAAOH,CACT,CAAC,EAEKI,EAAc1H,EAAW,EAAE,EAG3B2H,EAAYP,EAAS,KAClB,CACL,oBAAqBP,EAAY,cAAc,OAC/C,aAAcA,EAAY,aAC1B,UAAWA,EAAY,UACvB,YAAa3G,EAAY,OAE5B,EAGK0H,EAAe,SAAY,CAC/B,GAAI,CAAC1H,EAAY,MAAM,OAAQ,OAG/B6G,EAAY,MAAQ,GAEpB,MAAMc,EAAY,KAAK,MACvB,MAAMtH,EAAaL,EAAY,MAAO,CAAC,EACvC8G,EAAW,MAAQ,KAAK,MAAQa,CAClC,EAEMC,GAAoB,SAAY,CACpC,GAAI5H,EAAY,MAAM,OAAO,OAAS,EAAG,CACvC6G,EAAY,MAAQ,GACpB,MACF,CAGA,GAAI,CACF,KAAM,CAAE,KAAAlF,CAAA,EAAS,MAAMkG,EAAqB7H,EAAY,KAAK,EAC7D6G,EAAY,MAAQlF,GAAQ,EAC9B,OAASR,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,EAChC0F,EAAY,MAAQ,EACtB,CACF,EAEMiB,EAAoBC,GAAoB,CAC5C,QAAQ,IAAI,oBAAqBA,CAAU,EAC3C/H,EAAY,MAAQ+H,EAAW,WAC/BlB,EAAY,MAAQ,GACpBa,EAAA,CACF,EAEMM,EAAqBC,GAAiB,CAC1C,OAAQA,EAAA,CACN,IAAK,OACH,MAAO,kBACT,IAAK,OACH,MAAO,eACT,QACE,MAAO,eAEb,EAEMC,EAA0BD,GAAiB,CAC/C,OAAQA,EAAA,CACN,IAAK,OACH,MAAO,KACT,IAAK,OACH,MAAO,KACT,QACE,MAAO,KAEb,EAEME,EAAatF,GAAgB,CACjC,MAAMuF,EAAczB,EAAY,QAAQ,MAAQ,GAC5CyB,EAAY,SAASvF,CAAG,EAC1B8D,EAAY,cAAc,CACxB,KAAMyB,EAAY,OAAOC,GAAKA,IAAMxF,CAAG,EACxC,EAED8D,EAAY,cAAc,CACxB,KAAM,CAAC,GAAGyB,EAAavF,CAAG,EAC3B,CAEL,EAEMyF,EAAW,MAAO/H,GAAiB,CACnCA,EAAO,GAAKA,EAAO0G,EAAW,OAClC,MAAM5G,EAAaL,EAAY,MAAOO,CAAI,CAC5C,EAEMgI,EAAc,IAAM,CACxBvI,EAAY,MAAQ,GACpB6G,EAAY,MAAQ,GACpBE,EAAA,CACF,EAEMyB,EAAqBzG,GAAyB,OAQlD,OAPA,QAAQ,IAAI,qBAAsBA,CAAM,EAGpC,OACF,MAAM,kBAGAA,EAAO,MACb,IAAK,OACH,QAAQ,IAAI,SAAU,SAASA,EAAO,EAAE,EAAE,EAC1C0E,EAAO,KAAK,SAAS1E,EAAO,EAAE,EAAE,EAChC,MACF,IAAK,OACH,MAAM0G,IAASzG,EAAAD,EAAO,YAAP,YAAAC,EAAkB,KAAMD,EAAO,QAC9C,QAAQ,IAAI,SAAU,YAAY0G,CAAM,EAAE,EACtCA,GACFhC,EAAO,KAAK,YAAYgC,CAAM,EAAE,EAElC,MACF,IAAK,UACC1G,EAAO,UACT,QAAQ,IAAI,SAAU,SAASA,EAAO,OAAO,YAAYA,EAAO,EAAE,EAAE,EACpE0E,EAAO,KAAK,SAAS1E,EAAO,OAAO,YAAYA,EAAO,EAAE,EAAE,GAE5D,MAEN,EAEM8F,EAAuB,MAAOvH,GAAkB,CACpD,GAAI,CACF,QAAQ,IAAI,UAAWA,CAAK,EAC5B,KAAM,CAAE,SAAAgB,CAAA,EAAa,MAAAoH,GAAA,yBAAApH,GAAA,KAAM,QAAO,qBAAqB,OAAAqH,KAAA,+CAGvD,IAAItH,EAAeC,EAChB,KAAK,OAAO,EACZ,OAAO,gCAAgC,EACvC,MAAM,aAAc,CAAE,UAAW,GAAO,EACxC,MAAM,CAAC,EAENhB,GAASA,EAAM,SACjBe,EAAeA,EAAa,GAAG,gBAAgBf,CAAK,oBAAoBA,CAAK,GAAG,GAGlF,KAAM,CAAE,KAAMsI,EAAc,MAAOC,CAAA,EAAkB,MAAMxH,EAE3D,GAAIwH,EAAe,MAAMA,EAUzB,MAAO,CAAE,QAAS,GAAM,MAPDD,GAAgB,IAAI,IAAI9G,GAAA,OAAS,OACtD,GAAIA,EAAK,GACT,WAAYA,EAAK,SAASE,EAAAF,EAAK,UAAL,YAAAE,EAAc,UAAU,EAAG,KACrD,KAAM,OACN,WAAYF,EAAK,YACjB,CAE4B,CAChC,OAASX,EAAY,CACnB,eAAQ,MAAM,YAAaA,CAAK,EACzB,CAAE,QAAS,GAAO,MAAAA,CAAA,CAC3B,CACF,EAGA,OAAA2H,GAAM,IAAMnC,EAAY,QAAS,SAAY,CACvC3G,EAAY,MAAM,QACpB,MAAM0H,EAAA,CAEV,EAAG,CAAE,KAAM,GAAM,EAGjBoB,GAAM9I,EAAc+I,GAAa,CAC1BA,EAAS,QACZhC,EAAA,CAEJ,CAAC,EAGDiC,GAAU,SAAY,OACpB,GAAI,CACF,MAAMjH,EAAS,MAAMiF,EAAA,EACjBjF,EAAO,SAAWA,EAAO,OAC3ByF,EAAY,MAAQzF,EAAO,KAC3B,QAAQ,IAAI,YAAayF,EAAY,KAAK,EAE9C,OAASrG,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,CAClC,CAGA,MAAM8H,GAAA,GACNjH,EAAA4E,EAAY,QAAZ,MAAA5E,EAAmB,OACrB,CAAC,UA/ZC6B,EAAA,EAAAL,EAsLM,MAtLNM,GAsLM,CApLJC,EA8BM,MA9BNC,GA8BM,CA7BJD,EAcM,MAdNE,GAcM,GAbJF,EAQE,iBAPI,cAAJ,IAAI6C,uCACK5G,EAAW,MAAA0D,GACpB,KAAK,OACL,MAAM,4BACN,YAAY,gBACX,WAAagE,EAAY,WACzB,QAAOE,EAAA,iBALC5H,EAAA,KAAW,IAOtB+D,EAGS,UAHD,MAAM,6BAA8B,QAAO2D,EAAe,SAAUwB,EAAAnJ,CAAA,oBAC1EgE,EAA4B,KAAzB,MAAM,gBAAc,WAAK,OAE9B,eAIS8C,EAAA,MAAY,OAAM,GAA7BhD,IAAAL,EAWM,MAXNY,GAWM,EAVJP,EAAA,IAAAL,EASMwB,EAAA,KAAAmE,EAR0BtC,EAAA,MAAW,CAAjCkB,EAAYqB,SADtB5F,EASM,OAPH,IAAK4F,EACN,MAAM,kBACL,QAAK1F,GAAEoE,EAAiBC,CAAU,IAEnChE,EAAmD,KAA/C,MAAKsF,EAAErB,EAAkBD,EAAW,IAAI,YAC5ChE,EAAgE,OAAhEO,GAAgEJ,EAA/B6D,EAAW,UAAU,KACtDhE,EAAkF,OAAlFU,GAAkFP,EAAjDgE,EAAuBH,EAAW,IAAI,mCAMlE/H,EAAA,OAAX6D,EAAA,EAAAL,EAqFM,MArFNkB,GAqFM,CApFJX,EAmEM,MAnENY,GAmEM,CAjEJZ,EAuCM,MAvCNa,GAuCM,CAtCJnB,EAAA,MAAAA,EAAA,IAAAM,EAAyC,SAAlC,MAAM,gBAAe,QAAK,KACjCA,EAoCM,MApCNc,GAoCM,GAnCJd,EAME,SALA,KAAK,QACL,MAAM,YACN,GAAG,gDACMmF,EAAAvC,CAAA,EAAY,QAAQ,KAAIjD,GACjC,MAAM,qBADGwF,EAAAvC,CAAA,EAAY,QAAQ,IAAI,kBAGnC5C,EAAgE,SAAzD,MAAM,0BAA0B,IAAI,YAAW,KAAE,OAExDA,EAME,SALA,KAAK,QACL,MAAM,YACN,GAAG,kDACMmF,EAAAvC,CAAA,EAAY,QAAQ,KAAIjD,GACjC,MAAM,uBADGwF,EAAAvC,CAAA,EAAY,QAAQ,IAAI,kBAGnC5C,EAAkE,SAA3D,MAAM,0BAA0B,IAAI,cAAa,KAAE,OAE1DA,EAME,SALA,KAAK,QACL,MAAM,YACN,GAAG,kDACMmF,EAAAvC,CAAA,EAAY,QAAQ,KAAIjD,GACjC,MAAM,uBADGwF,EAAAvC,CAAA,EAAY,QAAQ,IAAI,kBAGnC5C,EAAkE,SAA3D,MAAM,0BAA0B,IAAI,cAAa,KAAE,OAE1DA,EAME,SALA,KAAK,QACL,MAAM,YACN,GAAG,qDACMmF,EAAAvC,CAAA,EAAY,QAAQ,KAAIjD,GACjC,MAAM,0BADGwF,EAAAvC,CAAA,EAAY,QAAQ,IAAI,kBAGnC5C,EAAqE,SAA9D,MAAM,0BAA0B,IAAI,iBAAgB,KAAE,SAKjEA,EAUM,MAVNe,GAUM,CATJrB,EAAA,MAAAA,EAAA,IAAAM,EAAyC,SAAlC,MAAM,gBAAe,QAAK,OACjCA,EAOS,UAPD,MAAM,mDAAuBmF,EAAAvC,CAAA,EAAY,QAAQ,OAAMjD,EAAA,sXAA1BwF,EAAAvC,CAAA,EAAY,QAAQ,MAAM,MAWjE5C,EASM,MATNgB,GASM,CARJtB,EAAA,MAAAA,EAAA,IAAAM,EAAyC,SAAlC,MAAM,gBAAe,QAAK,OACjCA,EAMS,UAND,MAAM,mDAAuBmF,EAAAvC,CAAA,EAAY,QAAQ,UAASjD,EAAA,8RAA7BwF,EAAAvC,CAAA,EAAY,QAAQ,SAAS,QAW3Da,EAAA,MAAY,OAAM,GAA7B3D,IAAAL,EAaM,MAbNyB,GAaM,CAZJxB,EAAA,MAAAA,EAAA,IAAAM,EAAyC,SAAlC,MAAM,gBAAe,QAAK,KACjCA,EAUM,MAVNmB,GAUM,QATJ1B,EAQOwB,EAAA,KAAAmE,EAPS3B,EAAA,MAAP3E,GAAG,kBADZW,EAQO,QANJ,IAAKX,EAAI,IACV,MAAKwG,EAAA,CAAC,YAAW,SACCH,IAAAvC,CAAA,EAAY,QAAQ,OAApBuC,cAA0B,SAASrG,EAAI,IAAG,IAC3D,QAAKa,GAAEyE,EAAUtF,EAAI,GAAG,KAEtBA,EAAI,GAAG,EAAG,OAAKA,EAAI,KAAK,EAAG,KAChC,GAAAsC,EAAA,oCAMKnF,EAAA,QAAgBkJ,EAAAnJ,CAAA,GAA3B8D,IAAAL,EAaM,MAbN4B,GAaM,CAZJrB,EAGO,OAHPsB,GAGO,CAHkBK,EAAA,OACpBxB,EAAGgF,EAAAvC,CAAA,EAAY,YAAY,EAAG,QACjC,GAAYG,EAAA,OAAZjD,EAAA,EAAAL,EAAuD,OAAA8B,GAA/B,QAAKpB,EAAG4C,EAAA,KAAU,EAAG,MAAG,eAEpC9G,EAAA,WAAdwD,EAGS,gBAHkB,MAAM,mCAAoC,QAAO+E,CAAA,qBAC1ExE,EAA8B,KAA3B,MAAM,kBAAgB,WAAK,OAEhC,kBAEAA,EAEM,MAFNwB,GAA4D,UACnD,KAAK,UAAUkC,EAAA,KAAS,kBAKxByB,EAAAnJ,CAAA,GAAX8D,EAAA,EAAAL,EAKM,MALNgC,GAKM,IAAA/B,EAAA,MAAAA,EAAA,KAJJM,EAEM,OAFD,MAAM,8BAA8B,KAAK,WAC5CA,EAA2C,QAArC,MAAM,mBAAkB,QAAM,OAEtCA,EAAwC,QAAlC,MAAM,gBAAe,SAAM,kBAIxBmF,EAAAvC,CAAA,EAAY,cAAc,WAAeuC,EAAAnJ,CAAA,GAApD8D,EAAA,EAAAL,EAOM,MAPNiC,GAOM,EANJ5B,EAAA,IAAAL,EAKEwB,EAAA,KAAAmE,EAJiBD,EAAAvC,CAAA,EAAY,cAAtB5E,QADTuH,GAKEC,GAAA,CAHC,OAAQxH,EAAO,IAAI,IAAIA,EAAO,EAAE,GAChC,OAAAA,EACA,QAAOyG,CAAA,gCAKIxI,EAAA,QAAgBkJ,EAAAnJ,CAAA,GAAhC8D,IAAAL,EAIM,MAJNmC,GAIM,IAAAlC,EAAA,MAAAA,EAAA,KAHJM,EAA4B,KAAzB,MAAM,gBAAc,SACvBA,EAAgB,UAAZ,UAAO,IACXA,EAAwB,SAArB,oBAAiB,kBAIXkD,EAAA,MAAU,GAArBpD,IAAAL,EAiBM,MAjBNoC,GAiBM,CAhBJ7B,EAeK,KAfL8B,GAeK,CAdH9B,EAEK,MAFD,MAAKsF,EAAA,CAAC,YAAW,UAAqBH,EAAAvC,CAAA,EAAY,cAAW,OAC/D5C,EAA4F,KAAzF,MAAM,YAAY,KAAK,IAAK,QAAKN,EAAA,KAAAA,EAAA,GAAA+F,EAAA9F,GAAU4E,EAASY,EAAAvC,CAAA,EAAY,YAAW,kBAAO,KAAG,aAE1FnD,EAOKwB,EAAA,KAAAmE,EANYhC,EAAA,MAAR5G,QADTiD,EAOK,MALF,IAAKjD,EACN,SAAM,YAAW,QACCA,IAAS2I,EAAAvC,CAAA,EAAY,YAAW,KAElD5C,EAA4E,KAAzE,MAAM,YAAY,KAAK,IAAK,QAAKyF,EAAA9F,GAAU4E,EAAS/H,CAAI,kBAAMA,CAAI,IAAAuF,EAAA,cAEvE/B,EAEK,MAFD,SAAM,YAAW,UAAqBmF,KAAY,cAAgBjC,EAAA,MAAU,KAC9ElD,EAA4F,KAAzF,MAAM,YAAY,KAAK,IAAK,QAAKN,EAAA,KAAAA,EAAA,GAAA+F,EAAA9F,GAAU4E,EAASY,EAAAvC,CAAA,EAAY,YAAW,kBAAO,KAAG,iPCvJlG,MAAM8C,EAAQC,GAAA,EACChD,GAAA,EACf,MAAMC,EAAchH,GAAA,EAEpB,OAAAqJ,GAAU,SAAY,CAEpB,MAAM1I,EAAQmJ,EAAM,MAAM,EACtBnJ,GACF,MAAMqG,EAAY,aAAarG,EAAO,CAAC,CAE3C,CAAC,mCArCC,OAAAuD,EAAA,EAAAL,EAkBM,MAlBNM,GAkBM,CAjBJC,EAUS,SAVTC,GAUS,CATPD,EAQM,MARNE,GAQM,CAPJF,EAMM,MANNI,GAMM,CALJI,EAGaoF,EAAA,CAHD,GAAG,IAAI,MAAM,yBACvB,IAAgC,IAAAlG,EAAA,KAAAA,EAAA,IAAhCM,EAAgC,KAA7B,MAAM,oBAAkB,WAAK,SAElC,cACAN,EAAA,KAAAA,EAAA,GAAAM,EAAgC,MAA5B,MAAM,cAAa,OAAI,WAKjCA,EAIO,OAJPK,GAIO,CAHLL,EAEM,MAFNM,GAEM,CADJE,EAAmBqF,EAAA","names":["useSearchStore","defineStore","searchResults","ref","isLoading","searchQuery","filters","totalResults","currentPage","pageSize","globalSearch","query","page","offset","results","totalCount","postsResult","searchPosts","usersResult","searchUsers","commentsResult","searchComments","applySorting","paginatedResults","error","handleSupabaseError","queryBuilder","supabase","searchConditions","timeFilter","getTimeFilter","applyPostSorting","data","count","withRetry","post","result","_a","_b","_c","user","applyCommentSorting","comment","_d","now","a","b","newFilters","limit","tagCounts","tag","truncateText","text","maxLength","formatTime","timestamp","date","diffMs","diffMins","diffHours","diffDays","_createElementBlock","_cache","$event","$emit","__props","_openBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createVNode","UserAvatar","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_Fragment","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_createTextVNode","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","router","useRouter","searchStore","searchInput","suggestions","searchTime","clearResults","getPopularTags","totalPages","computed","displayedPages","pages","start","end","i","popularTags","debugInfo","handleSearch","startTime","handleInputChange","getSearchSuggestions","selectSuggestion","suggestion","getSuggestionIcon","type","getSuggestionTypeLabel","toggleTag","currentTags","t","goToPage","clearSearch","handleResultClick","userId","__vitePreload","n","fallbackData","fallbackError","watch","newQuery","onMounted","nextTick","_unref","_renderList","index","_normalizeClass","_createBlock","SearchResultItem","_withModifiers","route","useRoute","_component_RouterLink","SearchComponent"],"ignoreList":[],"sources":["../../src/stores/search.ts","../../src/components/SearchResultItem.vue","../../src/components/SearchComponent.vue","../../src/views/SearchView.vue"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { supabase, withRetry, handleSupabaseError } from '@/services/supabase'\r\nimport type { Database } from '@/types/supabase'\r\n\r\ninterface SearchResult {\r\n  type: 'post' | 'user' | 'comment'\r\n  id: string\r\n  title?: string\r\n  content: string\r\n  relevance_score?: number\r\n  created_at: string\r\n  updated_at: string\r\n  // 帖子相关字段\r\n  user_id?: string\r\n  username?: string\r\n  avatar_url?: string | null\r\n  level?: number\r\n  like_count?: number\r\n  comment_count?: number\r\n  view_count?: number\r\n  tags?: string[]\r\n  is_pinned?: boolean\r\n  // 用户相关字段\r\n  user_data?: {\r\n    id: string\r\n    username: string\r\n    avatar_url: string | null\r\n    level: number\r\n    experience_points: number\r\n  }\r\n  // 评论相关字段\r\n  post_id?: string\r\n  post_title?: string\r\n  parent_id?: string\r\n}\r\n\r\ninterface SearchFilters {\r\n  type: 'all' | 'posts' | 'users' | 'comments'\r\n  sortBy: 'relevance' | 'newest' | 'oldest' | 'most_liked' | 'most_commented' | 'most_viewed'\r\n  timeRange: 'all' | 'today' | 'week' | 'month' | 'year'\r\n  tags?: string[]\r\n}\r\n\r\nexport const useSearchStore = defineStore('search', () => {\r\n  const searchResults = ref<SearchResult[]>([])\r\n  const isLoading = ref(false)\r\n  const searchQuery = ref('')\r\n  const filters = ref<SearchFilters>({\r\n    type: 'all',\r\n    sortBy: 'relevance',\r\n    timeRange: 'all',\r\n    tags: []\r\n  })\r\n  const totalResults = ref(0)\r\n  const currentPage = ref(1)\r\n  const pageSize = ref(20)\r\n\r\n  // 全局搜索\r\n  const globalSearch = async (query: string, page = 1) => {\r\n    if (!query.trim()) {\r\n      searchResults.value = []\r\n      totalResults.value = 0\r\n      return { success: true, data: [] }\r\n    }\r\n\r\n    isLoading.value = true\r\n    searchQuery.value = query\r\n    currentPage.value = page\r\n\r\n    try {\r\n      const offset = (page - 1) * pageSize.value\r\n      let results: SearchResult[] = []\r\n      let totalCount = 0\r\n\r\n      console.log('globalSearch: 开始搜索', { query, page, type: filters.value.type })\r\n\r\n      // 根据搜索类型执行不同的搜索\r\n      if (filters.value.type === 'all' || filters.value.type === 'posts') {\r\n        const postsResult = await searchPosts(query, 0) // 获取所有数据，不分页\r\n        results = results.concat(postsResult.data)\r\n        if (filters.value.type === 'posts') {\r\n          totalCount = postsResult.count\r\n        } else {\r\n          totalCount += postsResult.count\r\n        }\r\n        console.log('globalSearch: 帖子搜索结果', { count: postsResult.count, dataLength: postsResult.data.length })\r\n      }\r\n\r\n      if (filters.value.type === 'all' || filters.value.type === 'users') {\r\n        const usersResult = await searchUsers(query, 0) // 获取所有数据，不分页\r\n        results = results.concat(usersResult.data)\r\n        if (filters.value.type === 'users') {\r\n          totalCount = usersResult.count\r\n        } else {\r\n          totalCount += usersResult.count\r\n        }\r\n        console.log('globalSearch: 用户搜索结果', { count: usersResult.count, dataLength: usersResult.data.length })\r\n      }\r\n\r\n      if (filters.value.type === 'all' || filters.value.type === 'comments') {\r\n        const commentsResult = await searchComments(query, 0) // 获取所有数据，不分页\r\n        results = results.concat(commentsResult.data)\r\n        if (filters.value.type === 'comments') {\r\n          totalCount = commentsResult.count\r\n        } else {\r\n          totalCount += commentsResult.count\r\n        }\r\n        console.log('globalSearch: 评论搜索结果', { count: commentsResult.count, dataLength: commentsResult.data.length })\r\n      }\r\n\r\n      console.log('globalSearch: 合并前的结果', { totalCount, resultsLength: results.length })\r\n\r\n      // 应用排序\r\n      results = applySorting(results)\r\n\r\n      // 应用分页\r\n      const paginatedResults = results.slice(offset, offset + pageSize.value)\r\n\r\n      searchResults.value = paginatedResults\r\n      totalResults.value = totalCount\r\n\r\n      console.log('globalSearch: 最终结果', { totalCount, paginatedResultsLength: paginatedResults.length })\r\n\r\n      return { success: true, data: paginatedResults, count: totalCount }\r\n    } catch (error: any) {\r\n      console.error('搜索失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 搜索帖子\r\n  const searchPosts = async (query: string, offset = 0) => {\r\n    try {\r\n      let queryBuilder = supabase\r\n        .from('posts')\r\n        .select(`\r\n          *,\r\n          profiles: user_id (username, avatar_url, level)\r\n        `, { count: 'exact' })\r\n\r\n      // 应用搜索条件\r\n      const searchConditions = []\r\n      if (query.trim()) {\r\n        searchConditions.push(`title.ilike.%${query}%`)\r\n        searchConditions.push(`content.ilike.%${query}%`)\r\n      }\r\n\r\n      // 应用标签过滤\r\n      if (filters.value.tags && filters.value.tags.length > 0) {\r\n        searchConditions.push(`tags.cs.{${filters.value.tags.join(',')}}`)\r\n      }\r\n\r\n      // 应用时间范围过滤\r\n      const timeFilter = getTimeFilter()\r\n      if (timeFilter) {\r\n        searchConditions.push(`created_at.gte.${timeFilter.value}`)\r\n      }\r\n\r\n      if (searchConditions.length > 0) {\r\n        queryBuilder = queryBuilder.or(searchConditions.join(','))\r\n      }\r\n\r\n      // 应用排序\r\n      queryBuilder = applyPostSorting(queryBuilder)\r\n\r\n      // 应用分页\r\n      queryBuilder = queryBuilder.range(offset, offset + pageSize.value - 1)\r\n\r\n      const { data, error, count } = await withRetry(() => queryBuilder)\r\n\r\n      if (error) throw error\r\n\r\n      const results: SearchResult[] = (data || []).map(post => {\r\n        console.log('searchPosts: 处理帖子数据', post);\r\n        const result = {\r\n          type: 'post',\r\n          id: post.id,\r\n          title: post.title,\r\n          content: post.content,\r\n          created_at: post.created_at,\r\n          updated_at: post.updated_at,\r\n          user_id: post.user_id,\r\n          username: post.profiles?.username,\r\n          avatar_url: post.profiles?.avatar_url,\r\n          level: post.profiles?.level,\r\n          like_count: post.like_count,\r\n          comment_count: post.comment_count,\r\n          view_count: post.view_count,\r\n          tags: post.tags,\r\n          is_pinned: post.is_pinned\r\n        };\r\n        console.log('searchPosts: 转换后的结果', result);\r\n        return result;\r\n      })\r\n\r\n      return { data: results, count: count || 0 }\r\n    } catch (error: any) {\r\n      console.error('搜索帖子失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 搜索用户\r\n  const searchUsers = async (query: string, offset = 0) => {\r\n    try {\r\n      let queryBuilder = supabase\r\n        .from('profiles')\r\n       .select('*', { count: 'exact' })\r\n\r\n      // 应用搜索条件\r\n      if (query.trim()) {\r\n        queryBuilder = queryBuilder.ilike('username', `%${query}%`)\r\n      }\r\n\r\n      // 应用排序\r\n      queryBuilder = queryBuilder.order('experience_points', { ascending: false })\r\n\r\n      // 应用分页\r\n      queryBuilder = queryBuilder.range(offset, offset + pageSize.value - 1)\r\n\r\n      const { data, error, count } = await withRetry(() => queryBuilder)\r\n\r\n      if (error) throw error\r\n\r\n      const results: SearchResult[] = (data || []).map(user => ({\r\n        type: 'user',\r\n        id: user.id,\r\n        content: `等级 ${user.level} · 经验值 ${user.experience_points}`,\r\n        created_at: user.created_at,\r\n        updated_at: user.updated_at,\r\n        user_data: {\r\n          id: user.id,\r\n          username: user.username,\r\n          avatar_url: user.avatar_url,\r\n          level: user.level,\r\n          experience_points: user.experience_points\r\n        }\r\n      }))\r\n\r\n      return { data: results, count: count || 0 }\r\n    } catch (error: any) {\r\n      console.error('搜索用户失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 搜索评论\r\n  const searchComments = async (query: string, offset = 0) => {\r\n    try {\r\n      let queryBuilder = supabase\r\n        .from('comments')\r\n        .select(`\r\n          *,\r\n          profiles: user_id (username, avatar_url, level),\r\n          posts: post_id (title)\r\n        `, { count: 'exact' })\r\n\r\n      // 应用搜索条件\r\n      if (query.trim()) {\r\n        queryBuilder = queryBuilder.ilike('content', `%${query}%`)\r\n      }\r\n\r\n      // 应用时间范围过滤\r\n      const timeFilter = getTimeFilter()\r\n      if (timeFilter) {\r\n        queryBuilder = queryBuilder.filter('created_at', timeFilter.operator, timeFilter.value)\r\n      }\r\n\r\n      // 应用排序\r\n      queryBuilder = applyCommentSorting(queryBuilder)\r\n\r\n      // 应用分页\r\n      queryBuilder = queryBuilder.range(offset, offset + pageSize.value - 1)\r\n\r\n      const { data, error, count } = await withRetry(() => queryBuilder)\r\n\r\n      if (error) throw error\r\n\r\n      const results: SearchResult[] = (data || []).map(comment => ({\r\n        type: 'comment',\r\n        id: comment.id,\r\n        content: comment.content,\r\n        created_at: comment.created_at,\r\n        updated_at: comment.updated_at,\r\n        user_id: comment.user_id,\r\n        username: comment.profiles?.username,\r\n        avatar_url: comment.profiles?.avatar_url,\r\n        level: comment.profiles?.level,\r\n        like_count: comment.like_count,\r\n        post_id: comment.post_id,\r\n        post_title: comment.posts?.title,\r\n        parent_id: comment.parent_id\r\n      }))\r\n\r\n      return { data: results, count: count || 0 }\r\n    } catch (error: any) {\r\n      console.error('搜索评论失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 获取时间过滤器\r\n  const getTimeFilter = () => {\r\n    const now = new Date()\r\n    switch (filters.value.timeRange) {\r\n      case 'today':\r\n        return { operator: 'gte', value: new Date(now.setHours(0, 0, 0, 0)).toISOString() }\r\n      case 'week':\r\n        return { operator: 'gte', value: new Date(now.setDate(now.getDate() - 7)).toISOString() }\r\n      case 'month':\r\n        return { operator: 'gte', value: new Date(now.setMonth(now.getMonth() - 1)).toISOString() }\r\n      case 'year':\r\n        return { operator: 'gte', value: new Date(now.setFullYear(now.getFullYear() - 1)).toISOString() }\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  // 应用帖子排序\r\n  const applyPostSorting = (queryBuilder: any) => {\r\n    switch (filters.value.sortBy) {\r\n      case 'newest':\r\n        return queryBuilder.order('created_at', { ascending: false })\r\n      case 'oldest':\r\n        return queryBuilder.order('created_at', { ascending: true })\r\n      case 'most_liked':\r\n        return queryBuilder.order('like_count', { ascending: false })\r\n      case 'most_commented':\r\n        return queryBuilder.order('comment_count', { ascending: false })\r\n      case 'most_viewed':\r\n        return queryBuilder.order('view_count', { ascending: false })\r\n      case 'relevance':\r\n      default:\r\n        // 默认按置顶和创建时间排序\r\n        return queryBuilder.order('is_pinned', { ascending: false }).order('created_at', { ascending: false })\r\n    }\r\n  }\r\n\r\n  // 应用评论排序\r\n  const applyCommentSorting = (queryBuilder: any) => {\r\n    switch (filters.value.sortBy) {\r\n      case 'newest':\r\n        return queryBuilder.order('created_at', { ascending: false })\r\n      case 'oldest':\r\n        return queryBuilder.order('created_at', { ascending: true })\r\n      case 'most_liked':\r\n        return queryBuilder.order('like_count', { ascending: false })\r\n      case 'relevance':\r\n      default:\r\n        return queryBuilder.order('created_at', { ascending: false })\r\n    }\r\n  }\r\n\r\n  // 应用排序到搜索结果\r\n  const applySorting = (results: SearchResult[]) => {\r\n    switch (filters.value.sortBy) {\r\n      case 'newest':\r\n        return results.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n      case 'oldest':\r\n        return results.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\r\n      case 'most_liked':\r\n        return results.sort((a, b) => (b.like_count || 0) - (a.like_count || 0))\r\n      case 'most_commented':\r\n        return results.sort((a, b) => (b.comment_count || 0) - (a.comment_count || 0))\r\n      case 'most_viewed':\r\n        return results.sort((a, b) => (b.view_count || 0) - (a.view_count || 0))\r\n      case 'relevance':\r\n      default:\r\n        return results\r\n    }\r\n  }\r\n\r\n  // 更新搜索过滤器\r\n  const updateFilters = (newFilters: Partial<SearchFilters>) => {\r\n    filters.value = { ...filters.value, ...newFilters }\r\n  }\r\n\r\n  // 清空搜索结果\r\n  const clearResults = () => {\r\n    searchResults.value = []\r\n    searchQuery.value = ''\r\n    totalResults.value = 0\r\n    currentPage.value = 1\r\n  }\r\n\r\n  // 获取热门标签\r\n  const getPopularTags = async (limit = 20) => {\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select('tags')\r\n          .not('tags', 'eq', '{}')\r\n          .limit(1000)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 统计标签频率\r\n      const tagCounts: { [key: string]: number } = {}\r\n      data?.forEach(post => {\r\n        post.tags?.forEach(tag => {\r\n          tagCounts[tag] = (tagCounts[tag] || 0) + 1\r\n        })\r\n      })\r\n\r\n      // 排序并返回热门标签\r\n      const popularTags = Object.entries(tagCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, limit)\r\n        .map(([tag, count]) => ({ tag, count }))\r\n\r\n      return { success: true, data: popularTags }\r\n    } catch (error: any) {\r\n      console.error('获取热门标签失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  return {\r\n    searchResults,\r\n    isLoading,\r\n    searchQuery,\r\n    filters,\r\n    totalResults,\r\n    currentPage,\r\n    pageSize,\r\n    globalSearch,\r\n    searchPosts,\r\n    searchUsers,\r\n    searchComments,\r\n    updateFilters,\r\n    clearResults,\r\n    getPopularTags\r\n  }\r\n})","<template>\n  <div class=\"search-result-item\" @click=\"$emit('click', result)\">\n    <!-- 帖子结果 -->\n    <div v-if=\"result.type === 'post'\" class=\"result-post\">\n      <div class=\"result-header\">\n        <span class=\"result-type-badge post-badge\">帖子</span>\n        <h5 class=\"result-title\">{{ result.title }}</h5>\n        <div v-if=\"result.is_pinned\" class=\"pinned-indicator\">\n          <i class=\"bi bi-pin-fill\"></i>\n          置顶\n        </div>\n      </div>\n      \n      <p class=\"result-content\">{{ truncateText(result.content, 200) }}</p>\n      \n      <div class=\"result-meta\">\n        <div class=\"user-info\">\n          <UserAvatar :user=\"result\" size=\"sm\" />\n          <span class=\"username\">{{ result.username }}</span>\n          <span class=\"user-level\">Lv.{{ result.level }}</span>\n        </div>\n        \n        <div class=\"post-stats\">\n          <span class=\"stat-item\">\n            <i class=\"bi bi-heart\"></i>\n            {{ result.like_count }}\n          </span>\n          <span class=\"stat-item\">\n            <i class=\"bi bi-chat\"></i>\n            {{ result.comment_count }}\n          </span>\n          <span class=\"stat-item\">\n            <i class=\"bi bi-eye\"></i>\n            {{ result.view_count }}\n          </span>\n        </div>\n      </div>\n      \n      <div v-if=\"result.tags && result.tags.length > 0\" class=\"result-tags\">\n        <span v-for=\"tag in result.tags.slice(0, 5)\" :key=\"tag\" class=\"tag\">\n          #{{ tag }}\n        </span>\n      </div>\n      \n      <div class=\"result-time\">\n        {{ formatTime(result.created_at) }}\n      </div>\n    </div>\n\n    <!-- 用户结果 -->\n    <div v-else-if=\"result.type === 'user'\" class=\"result-user\">\n      <div class=\"result-header\">\n        <span class=\"result-type-badge user-badge\">用户</span>\n        <h5 class=\"result-title\">{{ result.user_data?.username }}</h5>\n      </div>\n      \n      <div class=\"user-profile\">\n        <UserAvatar :user=\"result.user_data\" size=\"lg\" />\n        <div class=\"user-details\">\n          <p class=\"user-bio\">{{ result.content }}</p>\n          <div class=\"user-stats\">\n            <span class=\"stat-item\">\n              <i class=\"bi bi-trophy\"></i>\n              等级 {{ result.user_data?.level }}\n            </span>\n            <span class=\"stat-item\">\n              <i class=\"bi bi-star\"></i>\n              {{ result.user_data?.experience_points }} 经验值\n            </span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"result-time\">\n        加入于 {{ formatTime(result.created_at) }}\n      </div>\n    </div>\n\n    <!-- 评论结果 -->\n    <div v-else-if=\"result.type === 'comment'\" class=\"result-comment\">\n      <div class=\"result-header\">\n        <span class=\"result-type-badge comment-badge\">评论</span>\n        <h5 class=\"result-title\">\n          评论于: {{ result.post_title }}\n        </h5>\n      </div>\n      \n      <p class=\"result-content\">{{ truncateText(result.content, 200) }}</p>\n      \n      <div class=\"result-meta\">\n        <div class=\"user-info\">\n          <UserAvatar :user=\"result\" size=\"sm\" />\n          <span class=\"username\">{{ result.username }}</span>\n          <span class=\"user-level\">Lv.{{ result.level }}</span>\n        </div>\n        \n        <div v-if=\"result.like_count > 0\" class=\"comment-stats\">\n          <span class=\"stat-item\">\n            <i class=\"bi bi-heart\"></i>\n            {{ result.like_count }}\n          </span>\n        </div>\n      </div>\n      \n      <div v-if=\"result.parent_id\" class=\"reply-indicator\">\n        <i class=\"bi bi-reply\"></i>\n        回复评论\n      </div>\n      \n      <div class=\"result-time\">\n        {{ formatTime(result.created_at) }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport UserAvatar from './UserAvatar.vue'\nimport type { SearchResult } from '@/stores/search'\n\ninterface Props {\n  result: SearchResult\n}\n\nconst props = defineProps<Props>()\ndefineEmits<{\n  click: [result: SearchResult]\n}>()\n\n// 方法\nconst truncateText = (text: string, maxLength: number) => {\n  if (text.length <= maxLength) return text\n  return text.substring(0, maxLength) + '...'\n}\n\nconst formatTime = (timestamp: string) => {\n  const date = new Date(timestamp)\n  const now = new Date()\n  const diffMs = now.getTime() - date.getTime()\n  const diffMins = Math.floor(diffMs / 60000)\n  const diffHours = Math.floor(diffMs / 3600000)\n  const diffDays = Math.floor(diffMs / 86400000)\n\n  if (diffMins < 1) return '刚刚'\n  if (diffMins < 60) return `${diffMins}分钟前`\n  if (diffHours < 24) return `${diffHours}小时前`\n  if (diffDays < 7) return `${diffDays}天前`\n  \n  return date.toLocaleDateString('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })\n}\n</script>\n\n<style scoped>\n.search-result-item {\n  background: white;\n  border: 1px solid #e9ecef;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 16px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.search-result-item:hover {\n  border-color: #007bff;\n  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.1);\n  transform: translateY(-1px);\n}\n\n.result-header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.result-type-badge {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n\n.post-badge {\n  background-color: #e3f2fd;\n  color: #1976d2;\n}\n\n.user-badge {\n  background-color: #f3e5f5;\n  color: #7b1fa2;\n}\n\n.comment-badge {\n  background-color: #e8f5e8;\n  color: #388e3c;\n}\n\n.result-title {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #212529;\n  flex: 1;\n}\n\n.pinned-indicator {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  color: #dc3545;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.result-content {\n  color: #6c757d;\n  line-height: 1.6;\n  margin-bottom: 16px;\n}\n\n.result-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.username {\n  font-weight: 500;\n  color: #495057;\n}\n\n.user-level {\n  font-size: 12px;\n  color: #6c757d;\n  background-color: #f8f9fa;\n  padding: 2px 6px;\n  border-radius: 10px;\n}\n\n.post-stats,\n.comment-stats {\n  display: flex;\n  gap: 16px;\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 14px;\n  color: #6c757d;\n}\n\n.result-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-bottom: 12px;\n}\n\n.tag {\n  background-color: #e9ecef;\n  color: #495057;\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n}\n\n.result-time {\n  font-size: 12px;\n  color: #6c757d;\n}\n\n/* 用户结果特定样式 */\n.user-profile {\n  display: flex;\n  gap: 16px;\n  align-items: center;\n  margin-bottom: 16px;\n}\n\n.user-details {\n  flex: 1;\n}\n\n.user-bio {\n  color: #6c757d;\n  margin-bottom: 12px;\n}\n\n.user-stats {\n  display: flex;\n  gap: 16px;\n}\n\n/* 评论结果特定样式 */\n.reply-indicator {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #6c757d;\n  font-size: 14px;\n  margin-bottom: 8px;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .search-result-item {\n    padding: 16px;\n  }\n  \n  .result-header {\n    flex-wrap: wrap;\n  }\n  \n  .result-title {\n    font-size: 16px;\n  }\n  \n  .result-meta {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 8px;\n  }\n  \n  .user-profile {\n    flex-direction: column;\n    text-align: center;\n  }\n  \n  .post-stats,\n  .comment-stats,\n  .user-stats {\n    gap: 12px;\n  }\n}\n</style>","<template>\r\n  <div class=\"search-container\">\r\n    <!-- 搜索输入框 -->\r\n    <div class=\"search-input-container\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          ref=\"searchInput\"\r\n          v-model=\"searchQuery\"\r\n          type=\"text\"\r\n          class=\"form-control search-input\"\r\n          placeholder=\"搜索帖子、用户或评论...\"\r\n          @keyup.enter=\"handleSearch\"\r\n          @input=\"handleInputChange\"\r\n        />\r\n        <button class=\"btn btn-primary search-btn\" @click=\"handleSearch\" :disabled=\"isLoading\">\r\n          <i class=\"bi bi-search\"></i>\r\n          搜索\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- 搜索建议下拉框 -->\r\n      <div v-if=\"suggestions.length > 0\" class=\"search-suggestions\">\r\n        <div\r\n          v-for=\"(suggestion, index) in suggestions\"\r\n          :key=\"index\"\r\n          class=\"suggestion-item\"\r\n          @click=\"selectSuggestion(suggestion)\"\r\n        >\r\n          <i :class=\"getSuggestionIcon(suggestion.type)\"></i>\r\n          <span class=\"suggestion-text\">{{ suggestion.suggestion }}</span>\r\n          <span class=\"suggestion-type\">{{ getSuggestionTypeLabel(suggestion.type) }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 搜索过滤器 -->\r\n    <div v-if=\"searchQuery\" class=\"search-filters\">\r\n      <div class=\"filter-row\">\r\n        <!-- 搜索类型 -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">搜索范围:</label>\r\n          <div class=\"btn-group\" role=\"group\">\r\n            <input\r\n              type=\"radio\"\r\n              class=\"btn-check\"\r\n              id=\"type-all\"\r\n              v-model=\"searchStore.filters.type\"\r\n              value=\"all\"\r\n            />\r\n            <label class=\"btn btn-outline-primary\" for=\"type-all\">全部</label>\r\n            \r\n            <input\r\n              type=\"radio\"\r\n              class=\"btn-check\"\r\n              id=\"type-posts\"\r\n              v-model=\"searchStore.filters.type\"\r\n              value=\"posts\"\r\n            />\r\n            <label class=\"btn btn-outline-primary\" for=\"type-posts\">帖子</label>\r\n            \r\n            <input\r\n              type=\"radio\"\r\n              class=\"btn-check\"\r\n              id=\"type-users\"\r\n              v-model=\"searchStore.filters.type\"\r\n              value=\"users\"\r\n            />\r\n            <label class=\"btn btn-outline-primary\" for=\"type-users\">用户</label>\r\n            \r\n            <input\r\n              type=\"radio\"\r\n              class=\"btn-check\"\r\n              id=\"type-comments\"\r\n              v-model=\"searchStore.filters.type\"\r\n              value=\"comments\"\r\n            />\r\n            <label class=\"btn btn-outline-primary\" for=\"type-comments\">评论</label>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 排序方式 -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">排序方式:</label>\r\n          <select class=\"form-select\" v-model=\"searchStore.filters.sortBy\">\r\n            <option value=\"relevance\">相关性</option>\r\n            <option value=\"newest\">最新发布</option>\r\n            <option value=\"oldest\">最早发布</option>\r\n            <option value=\"most_liked\">最多点赞</option>\r\n            <option value=\"most_commented\">最多评论</option>\r\n            <option value=\"most_viewed\">最多浏览</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- 时间范围 -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">时间范围:</label>\r\n          <select class=\"form-select\" v-model=\"searchStore.filters.timeRange\">\r\n            <option value=\"all\">全部时间</option>\r\n            <option value=\"today\">今天</option>\r\n            <option value=\"week\">本周</option>\r\n            <option value=\"month\">本月</option>\r\n            <option value=\"year\">今年</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 热门标签筛选 -->\r\n      <div v-if=\"popularTags.length > 0\" class=\"tags-filter\">\r\n        <label class=\"filter-label\">热门标签:</label>\r\n        <div class=\"tags-container\">\r\n          <span\r\n            v-for=\"tag in popularTags\"\r\n            :key=\"tag.tag\"\r\n            class=\"tag-badge\"\r\n            :class=\"{ active: searchStore.filters.tags?.includes(tag.tag) }\"\r\n            @click=\"toggleTag(tag.tag)\"\r\n          >\r\n            {{ tag.tag }} ({{ tag.count }})\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 搜索结果统计 -->\r\n    <div v-if=\"searchQuery && !isLoading\" class=\"search-stats\">\r\n      <span class=\"stats-text\">\r\n        找到 {{ searchStore.totalResults }} 个结果\r\n        <span v-if=\"searchTime\"> (用时 {{ searchTime }}ms)</span>\r\n      </span>\r\n      <button v-if=\"searchQuery\" class=\"btn btn-sm btn-outline-secondary\" @click=\"clearSearch\">\r\n        <i class=\"bi bi-x-circle\"></i>\r\n        清空\r\n      </button>\r\n      <!-- 调试信息 -->\r\n      <div style=\"font-size: 12px; color: #999; margin-top: 5px;\">\r\n        调试: {{ JSON.stringify(debugInfo) }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 加载状态 -->\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">搜索中...</span>\r\n      </div>\r\n      <span class=\"loading-text\">搜索中...</span>\r\n    </div>\r\n\r\n    <!-- 搜索结果 -->\r\n    <div v-if=\"searchStore.searchResults.length > 0 && !isLoading\" class=\"search-results\">\r\n      <SearchResultItem\r\n        v-for=\"result in searchStore.searchResults\"\r\n        :key=\"`${result.type}-${result.id}`\"\r\n        :result=\"result\"\r\n        @click=\"handleResultClick\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 无结果提示 -->\r\n    <div v-else-if=\"searchQuery && !isLoading\" class=\"no-results\">\r\n      <i class=\"bi bi-search\"></i>\r\n      <h5>未找到相关内容</h5>\r\n      <p>尝试使用不同的关键词或调整搜索条件</p>\r\n    </div>\r\n\r\n    <!-- 分页 -->\r\n    <nav v-if=\"totalPages > 1\" class=\"pagination-nav\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" :class=\"{ disabled: searchStore.currentPage === 1 }\">\r\n          <a class=\"page-link\" href=\"#\" @click.prevent=\"goToPage(searchStore.currentPage - 1)\">上一页</a>\r\n        </li>\r\n        <li\r\n          v-for=\"page in displayedPages\"\r\n          :key=\"page\"\r\n          class=\"page-item\"\r\n          :class=\"{ active: page === searchStore.currentPage }\"\r\n        >\r\n          <a class=\"page-link\" href=\"#\" @click.prevent=\"goToPage(page)\">{{ page }}</a>\r\n        </li>\r\n        <li class=\"page-item\" :class=\"{ disabled: searchStore.currentPage === totalPages }\">\r\n          <a class=\"page-link\" href=\"#\" @click.prevent=\"goToPage(searchStore.currentPage + 1)\">下一页</a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch, onMounted, nextTick } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport { useSearchStore } from '@/stores/search'\r\nimport SearchResultItem from './SearchResultItem.vue'\r\nimport type { SearchResult, SearchFilters } from '@/stores/search'\r\n\r\nconst router = useRouter()\r\nconst searchStore = useSearchStore()\r\n\r\n// 响应式数据\r\nconst searchInput = ref<HTMLInputElement>()\r\nconst searchQuery = ref('')\r\nconst suggestions = ref<any[]>([])\r\nconst searchTime = ref(0)\r\n\r\n// 从 store 获取数据\r\nconst {\r\n  searchResults,\r\n  isLoading,\r\n  globalSearch,\r\n  clearResults,\r\n  getPopularTags\r\n} = searchStore\r\n\r\n// 计算属性\r\nconst totalPages = computed(() => {\r\n  const result = Math.ceil(searchStore.totalResults / searchStore.pageSize)\r\n  console.log('totalPages 计算:', { totalResults: searchStore.totalResults, pageSize: searchStore.pageSize, result })\r\n  return result\r\n})\r\n\r\nconst displayedPages = computed(() => {\r\n  const pages = []\r\n  const start = Math.max(1, searchStore.currentPage - 2)\r\n  const end = Math.min(totalPages.value, searchStore.currentPage + 2)\r\n  \r\n  for (let i = start; i <= end; i++) {\r\n    pages.push(i)\r\n  }\r\n  \r\n  return pages\r\n})\r\n\r\nconst popularTags = ref<any[]>([])\r\n\r\n// 调试计算属性\r\nconst debugInfo = computed(() => {\r\n  return {\r\n    searchResultsLength: searchStore.searchResults.length,\r\n    totalResults: searchStore.totalResults,\r\n    isLoading: searchStore.isLoading,\r\n    searchQuery: searchQuery.value\r\n  }\r\n})\r\n\r\n// 方法\r\nconst handleSearch = async () => {\r\n  if (!searchQuery.value.trim()) return\r\n  \r\n  // 清空搜索建议\r\n  suggestions.value = []\r\n  \r\n  const startTime = Date.now()\r\n  await globalSearch(searchQuery.value, 1)\r\n  searchTime.value = Date.now() - startTime\r\n}\r\n\r\nconst handleInputChange = async () => {\r\n  if (searchQuery.value.trim().length < 2) {\r\n    suggestions.value = []\r\n    return\r\n  }\r\n  \r\n  // 获取搜索建议\r\n  try {\r\n    const { data } = await getSearchSuggestions(searchQuery.value)\r\n    suggestions.value = data || []\r\n  } catch (error) {\r\n    console.error('获取搜索建议失败:', error)\r\n    suggestions.value = []\r\n  }\r\n}\r\n\r\nconst selectSuggestion = (suggestion: any) => {\r\n  console.log('selectSuggestion:', suggestion)\r\n  searchQuery.value = suggestion.suggestion\r\n  suggestions.value = []\r\n  handleSearch()\r\n}\r\n\r\nconst getSuggestionIcon = (type: string) => {\r\n  switch (type) {\r\n    case 'post':\r\n      return 'bi bi-file-text'\r\n    case 'user':\r\n      return 'bi bi-person'\r\n    default:\r\n      return 'bi bi-search'\r\n  }\r\n}\r\n\r\nconst getSuggestionTypeLabel = (type: string) => {\r\n  switch (type) {\r\n    case 'post':\r\n      return '帖子'\r\n    case 'user':\r\n      return '用户'\r\n    default:\r\n      return '其他'\r\n  }\r\n}\r\n\r\nconst toggleTag = (tag: string) => {\r\n  const currentTags = searchStore.filters.tags || []\r\n  if (currentTags.includes(tag)) {\r\n    searchStore.updateFilters({\r\n      tags: currentTags.filter(t => t !== tag)\r\n    })\r\n  } else {\r\n    searchStore.updateFilters({\r\n      tags: [...currentTags, tag]\r\n    })\r\n  }\r\n}\r\n\r\nconst goToPage = async (page: number) => {\r\n  if (page < 1 || page > totalPages.value) return\r\n  await globalSearch(searchQuery.value, page)\r\n}\r\n\r\nconst clearSearch = () => {\r\n  searchQuery.value = ''\r\n  suggestions.value = []\r\n  clearResults()\r\n}\r\n\r\nconst handleResultClick = (result: SearchResult) => {\r\n  console.log('handleResultClick:', result)\r\n  \r\n  // 阻止事件冒泡，避免重复触发\r\n  if (event) {\r\n    event.stopPropagation()\r\n  }\r\n  \r\n  switch (result.type) {\r\n    case 'post':\r\n      console.log('跳转到帖子:', `/post/${result.id}`)\r\n      router.push(`/post/${result.id}`)\r\n      break\r\n    case 'user':\r\n      const userId = result.user_data?.id || result.user_id\r\n      console.log('跳转到用户:', `/profile/${userId}`)\r\n      if (userId) {\r\n        router.push(`/profile/${userId}`)\r\n      }\r\n      break\r\n    case 'comment':\r\n      if (result.post_id) {\r\n        console.log('跳转到评论:', `/post/${result.post_id}#comment-${result.id}`)\r\n        router.push(`/post/${result.post_id}#comment-${result.id}`)\r\n      }\r\n      break\r\n  }\r\n}\r\n\r\nconst getSearchSuggestions = async (query: string) => {\r\n  try {\r\n    console.log('获取搜索建议:', query)\r\n    const { supabase } = await import('@/services/supabase')\r\n    \r\n    // 直接使用简单的查询作为搜索建议\r\n    let queryBuilder = supabase\r\n      .from('posts')\r\n      .select('id, title, content, created_at')\r\n      .order('created_at', { ascending: false })\r\n      .limit(5)\r\n      \r\n    if (query && query.trim()) {\r\n      queryBuilder = queryBuilder.or(`title.ilike.%${query}%,content.ilike.%${query}%`)\r\n    }\r\n    \r\n    const { data: fallbackData, error: fallbackError } = await queryBuilder\r\n    \r\n    if (fallbackError) throw fallbackError\r\n    \r\n    // 转换数据格式以匹配预期结构\r\n    const formattedData = (fallbackData || []).map(post => ({\r\n      id: post.id,\r\n      suggestion: post.title || post.content?.substring(0, 50),\r\n      type: 'post',\r\n      created_at: post.created_at\r\n    }))\r\n    \r\n    return { success: true, data: formattedData }\r\n  } catch (error: any) {\r\n    console.error('获取搜索建议失败:', error)\r\n    return { success: false, error }\r\n  }\r\n}\r\n\r\n// 监听过滤器变化\r\nwatch(() => searchStore.filters, async () => {\r\n  if (searchQuery.value.trim()) {\r\n    await handleSearch()\r\n  }\r\n}, { deep: true })\r\n\r\n// 监听搜索查询变化\r\nwatch(searchQuery, (newQuery) => {\r\n  if (!newQuery.trim()) {\r\n    clearResults()\r\n  }\r\n})\r\n\r\n// 组件挂载时获取热门标签\r\nonMounted(async () => {\r\n  try {\r\n    const result = await getPopularTags()\r\n    if (result.success && result.data) {\r\n      popularTags.value = result.data\r\n      console.log('获取热门标签成功:', popularTags.value)\r\n    }\r\n  } catch (error) {\r\n    console.error('获取热门标签失败:', error)\r\n  }\r\n  \r\n  // 聚焦搜索框\r\n  await nextTick()\r\n  searchInput.value?.focus()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.search-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.search-input-container {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-group {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.search-input {\r\n  flex: 1;\r\n  padding: 12px 16px;\r\n  font-size: 16px;\r\n  border: 2px solid #e9ecef;\r\n  border-radius: 8px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\n.search-input:focus {\r\n  outline: none;\r\n  border-color: #007bff;\r\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\r\n}\r\n\r\n.search-btn {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.search-suggestions {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  border: 1px solid #e9ecef;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.suggestion-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.suggestion-item:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.suggestion-text {\r\n  flex: 1;\r\n  margin: 0 10px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.suggestion-type {\r\n  font-size: 12px;\r\n  color: #6c757d;\r\n  background-color: #e9ecef;\r\n  padding: 2px 6px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.search-filters {\r\n  background-color: #f8f9fa;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-row {\r\n  display: flex;\r\n  gap: 20px;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.filter-label {\r\n  font-weight: 500;\r\n  color: #495057;\r\n  font-size: 14px;\r\n}\r\n\r\n.tags-filter {\r\n  border-top: 1px solid #e9ecef;\r\n  padding-top: 15px;\r\n}\r\n\r\n.tags-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n\r\n.tag-badge {\r\n  display: inline-block;\r\n  padding: 4px 12px;\r\n  background-color: #e9ecef;\r\n  color: #495057;\r\n  border-radius: 16px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.tag-badge:hover {\r\n  background-color: #dee2e6;\r\n}\r\n\r\n.tag-badge.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.search-stats {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.stats-text {\r\n  color: #6c757d;\r\n  font-size: 14px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 40px;\r\n  gap: 16px;\r\n}\r\n\r\n.loading-text {\r\n  color: #6c757d;\r\n}\r\n\r\n.search-results {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.no-results {\r\n  text-align: center;\r\n  padding: 60px 20px;\r\n  color: #6c757d;\r\n}\r\n\r\n.no-results i {\r\n  font-size: 48px;\r\n  margin-bottom: 16px;\r\n  display: block;\r\n}\r\n\r\n.pagination-nav {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 30px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .filter-row {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .filter-group {\r\n    width: 100%;\r\n  }\r\n  \r\n  .search-stats {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    align-items: flex-start;\r\n  }\r\n}\r\n</style>","<template>\n  <div class=\"search-view\">\n    <header class=\"header\">\n      <div class=\"container\">\n        <div class=\"header-content\">\n          <RouterLink to=\"/\" class=\"back-link\">\n            <i class=\"bi bi-arrow-left\"></i>\n            返回首页\n          </RouterLink>\n          <h1 class=\"page-title\">搜索结果</h1>\n        </div>\n      </div>\n    </header>\n\n    <main class=\"main\">\n      <div class=\"container\">\n        <SearchComponent />\n      </div>\n    </main>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { useSearchStore } from '@/stores/search'\nimport SearchComponent from '@/components/SearchComponent.vue'\n\nconst route = useRoute()\nconst router = useRouter()\nconst searchStore = useSearchStore()\n\nonMounted(async () => {\n  // 如果URL中有搜索参数，自动执行搜索\n  const query = route.query.q as string\n  if (query) {\n    await searchStore.globalSearch(query, 1)\n  }\n})\n</script>\n\n<style scoped>\n.search-view {\n  min-height: 100vh;\n  background-color: #f5f5f5;\n}\n\n.header {\n  background: white;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  padding: 1rem 20px;\n}\n\n.back-link {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #495057;\n  text-decoration: none;\n  padding: 8px 16px;\n  border-radius: 6px;\n  transition: all 0.2s;\n}\n\n.back-link:hover {\n  background-color: #f8f9fa;\n  color: #007bff;\n}\n\n.page-title {\n  margin: 0;\n  color: #212529;\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.main {\n  padding: 2rem 0;\n}\n\n@media (max-width: 768px) {\n  .header-content {\n    padding: 16px 20px;\n  }\n  \n  .page-title {\n    font-size: 20px;\n  }\n}\n</style>"],"file":"assets/SearchView-BqHP9wGz.js"}