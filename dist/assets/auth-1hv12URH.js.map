{"version":3,"file":"auth-1hv12URH.js","sources":["../../src/utils/profileManager.ts","../../src/stores/auth.ts"],"sourcesContent":["import { supabase } from '@/services/supabase'\r\nimport type { User } from '@supabase/supabase-js'\r\n\r\n/**\r\n * 用户资料管理器\r\n */\r\n\r\n/**\r\n * 确保用户资料存在\r\n */\r\nexport async function ensureProfileExists(user: User): Promise<{\r\n  success: boolean\r\n  profile?: any\r\n  created?: boolean\r\n  error?: string\r\n}> {\r\n  try {\r\n    console.log('👤 检查用户资料是否存在...', user.id)\r\n    \r\n    // 首先尝试获取现有资料\r\n    const { data: existingProfile, error: fetchError } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', user.id)\r\n      .single()\r\n    \r\n    if (fetchError) {\r\n      // 如果是\"未找到记录\"的错误，继续创建新资料\r\n      if (fetchError.code === 'PGRST116') {\r\n        console.log('📭 用户资料不存在，将创建新资料')\r\n      } else {\r\n        // 其他错误（如406、403等）可能是RLS策略问题\r\n        console.warn('⚠️ 获取用户资料失败:', fetchError.message)\r\n        \r\n        // RLS策略问题时直接使用模拟数据\r\n        if (fetchError.status === 406 || fetchError.status === 403 || fetchError.message.includes('permission') || fetchError.message.includes('row-level security')) {\r\n          const mockProfile = {\r\n            id: user.id,\r\n            username: user.user_metadata?.username || user.email?.split('@')[0] || `user_${user.id.slice(0, 8)}`,\r\n            avatar_url: null,\r\n            level: 1,\r\n            experience_points: 0,\r\n            created_at: new Date().toISOString()\r\n          }\r\n          mockProfiles.set(user.id, mockProfile)\r\n          console.log('🔧 使用模拟资料（获取用户资料时遇到RLS问题）')\r\n          return { success: true, profile: mockProfile, created: false }\r\n        }\r\n        \r\n        // 开发模式下使用模拟数据\r\n        if (import.meta.env.DEV) {\r\n          const mockProfile = getMockProfile(user.id)\r\n          if (mockProfile) {\r\n            console.log('🔧 使用开发模式模拟资料')\r\n            return { success: true, profile: mockProfile, created: false }\r\n          }\r\n        }\r\n        \r\n        // 非开发模式或没有模拟数据时抛出错误\r\n        throw fetchError\r\n      }\r\n    }\r\n    \r\n    if (existingProfile) {\r\n      console.log('✅ 用户资料已存在')\r\n      return { success: true, profile: existingProfile, created: false }\r\n    }\r\n    \r\n    // 资料不存在，创建新资料\r\n    console.log('➕ 创建新用户资料...')\r\n    \r\n    const username = user.user_metadata?.username || \r\n                    user.email?.split('@')[0] || \r\n                    `user_${user.id.slice(0, 8)}`\r\n    \r\n    const profileData = {\r\n      id: user.id,\r\n      username: username,\r\n      avatar_url: null,\r\n      level: 1,\r\n      experience_points: 0,\r\n      created_at: new Date().toISOString()\r\n    }\r\n    \r\n    const { data: newProfile, error: createError } = await supabase\r\n      .from('profiles')\r\n      .insert(profileData)\r\n      .select()\r\n      .single()\r\n    \r\n    if (createError) {\r\n      // 如果是唯一约束冲突（用户名已存在），尝试其他用户名\r\n      if (createError.code === '23505' && createError.message.includes('username')) {\r\n        console.log('🔄 用户名冲突，尝试生成唯一用户名...')\r\n        \r\n        const uniqueUsername = `${username}_${Date.now().toString().slice(-4)}`\r\n        profileData.username = uniqueUsername\r\n        \r\n        const { data: retryProfile, error: retryError } = await supabase\r\n          .from('profiles')\r\n          .insert(profileData)\r\n          .select()\r\n          .single()\r\n        \r\n        if (retryError) {\r\n          throw retryError\r\n        }\r\n        \r\n        console.log('✅ 用户资料创建成功（使用唯一用户名）')\r\n        return { success: true, profile: retryProfile, created: true }\r\n      }\r\n      \r\n      // 处理RLS策略错误（403）或其他权限错误\r\n      if (createError.code === '42501' || createError.message.includes('permission') || createError.status === 403 || createError.message.includes('row-level security')) {\r\n        console.warn('🔒 权限不足，无法创建用户资料:', createError.message)\r\n        \r\n        // 提供详细的错误信息和解决方案\r\n        const errorDetails = {\r\n          message: '数据库权限受限，无法创建用户资料',\r\n          solution: '请检查Supabase RLS策略配置',\r\n          errorCode: createError.code,\r\n          status: createError.status\r\n        }\r\n        \r\n        console.error('❌ RLS策略错误详情:', errorDetails)\r\n        \r\n        // 临时解决方案：始终使用模拟数据，直到RLS策略修复\r\n        const mockProfile = {\r\n          id: user.id,\r\n          username: username,\r\n          avatar_url: null,\r\n          level: 1,\r\n          experience_points: 0,\r\n          created_at: new Date().toISOString()\r\n        }\r\n        mockProfiles.set(user.id, mockProfile)\r\n        console.log('🔧 使用模拟资料（RLS策略问题，临时解决方案）')\r\n        return { \r\n          success: true, \r\n          profile: mockProfile, \r\n          created: true,\r\n          warning: '使用模拟数据（RLS策略需要修复）'\r\n        }\r\n      }\r\n      \r\n      throw createError\r\n    }\r\n    \r\n    console.log('✅ 用户资料创建成功')\r\n    return { success: true, profile: newProfile, created: true }\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ 确保用户资料存在失败:', error)\r\n    return { \r\n      success: false, \r\n      error: error.message,\r\n      created: false \r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 获取或创建用户资料\r\n */\r\nexport async function getOrCreateProfile(user: User): Promise<any> {\r\n  const result = await ensureProfileExists(user)\r\n  \r\n  if (!result.success) {\r\n    throw new Error(`无法获取或创建用户资料: ${result.error}`)\r\n  }\r\n  \r\n  return result.profile\r\n}\r\n\r\n/**\r\n * 更新用户资料\r\n */\r\nexport async function updateProfile(userId: string, updates: Partial<{\r\n  username: string\r\n  avatar_url: string | null\r\n  level: number\r\n  experience_points: number\r\n}>): Promise<{ success: boolean; error?: string }> {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('profiles')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', userId)\r\n    \r\n    if (error) {\r\n      throw error\r\n    }\r\n    \r\n    return { success: true }\r\n  } catch (error: any) {\r\n    console.error('❌ 更新用户资料失败:', error)\r\n    return { success: false, error: error.message }\r\n  }\r\n}\r\n\r\n/**\r\n * 检查数据库表是否存在\r\n */\r\nexport async function checkProfilesTableExists(): Promise<boolean> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('count')\r\n      .limit(1)\r\n    \r\n    // 如果没有错误或者错误是\"表不存在\"，返回相应结果\r\n    if (!error) return true\r\n    if (error.code === '42P01') return false // 表不存在\r\n    \r\n    // 处理权限错误（403/406）\r\n    if (error.status === 403 || error.status === 406) {\r\n      console.warn('🔒 检查表存在时权限受限，假设表存在')\r\n      return true\r\n    }\r\n    \r\n    throw error\r\n  } catch (error: any) {\r\n    console.error('❌ 检查profiles表失败:', error)\r\n    \r\n    // 开发模式下假设表存在\r\n    if (import.meta.env.DEV) {\r\n      console.warn('🔧 开发模式下假设profiles表存在')\r\n      return true\r\n    }\r\n    \r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 自动创建缺失的用户资料\r\n */\r\nexport async function autoCreateMissingProfiles(): Promise<void> {\r\n  try {\r\n    console.log('🔍 检查并创建缺失的用户资料...')\r\n    \r\n    // 获取当前会话用户\r\n    const { data: { session } } = await supabase.auth.getSession()\r\n    \r\n    if (!session?.user) {\r\n      console.log('🔐 没有登录用户，跳过资料创建')\r\n      return\r\n    }\r\n    \r\n    // 检查表是否存在\r\n    const tableExists = await checkProfilesTableExists()\r\n    if (!tableExists) {\r\n      console.warn('⚠️ profiles表不存在，无法创建用户资料')\r\n      return\r\n    }\r\n    \r\n    // 确保当前用户资料存在\r\n    const result = await ensureProfileExists(session.user)\r\n    \r\n    if (result.success) {\r\n      if (result.created) {\r\n        console.log('✅ 已为新用户创建资料')\r\n      } else {\r\n        console.log('✅ 用户资料已存在')\r\n      }\r\n    } else {\r\n      console.error('❌ 创建用户资料失败:', result.error)\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 自动创建用户资料失败:', error)\r\n  }\r\n}\r\n\r\n/**\r\n * 用户资料监听器\r\n */\r\nexport function setupProfileListeners(): void {\r\n  // 监听认证状态变化\r\n  supabase.auth.onAuthStateChange(async (event, session) => {\r\n    if (event === 'SIGNED_IN' && session?.user) {\r\n      console.log('🔐 用户登录，检查资料...')\r\n      \r\n      // 延迟执行，确保其他初始化完成\r\n      setTimeout(() => {\r\n        autoCreateMissingProfiles().catch(console.error)\r\n      }, 1000)\r\n    }\r\n  })\r\n}\r\n\r\n// 开发模式下的模拟资料\r\nconst mockProfiles = new Map<string, any>()\r\n\r\n/**\r\n * 开发模式下的模拟资料管理\r\n */\r\nexport function setupMockProfiles(): void {\r\n  if (!import.meta.env.DEV) return\r\n  \r\n  console.log('🔧 设置开发模式下的模拟用户资料...')\r\n  \r\n  // 添加一些模拟用户资料\r\n  mockProfiles.set('dev-user-id', {\r\n    id: 'dev-user-id',\r\n    username: 'devuser',\r\n    avatar_url: null,\r\n    level: 1,\r\n    experience_points: 0,\r\n    created_at: new Date().toISOString()\r\n  })\r\n  \r\n  mockProfiles.set('af216c8a-e67b-478f-ac60-e798fbc09298', {\r\n    id: 'af216c8a-e67b-478f-ac60-e798fbc09298',\r\n    username: '1724045101',\r\n    avatar_url: null,\r\n    level: 1,\r\n    experience_points: 0,\r\n    created_at: new Date().toISOString()\r\n  })\r\n}\r\n\r\n/**\r\n * 获取模拟用户资料\r\n */\r\nexport function getMockProfile(userId: string): any | null {\r\n  return mockProfiles.get(userId) || null\r\n}\r\n\r\n/**\r\n * 初始化用户资料系统\r\n */\r\nexport async function initializeProfileSystem(): Promise<void> {\r\n  console.log('👤 初始化用户资料系统...')\r\n  \r\n  // 开发模式下设置模拟资料\r\n  if (import.meta.env.DEV) {\r\n    setupMockProfiles()\r\n  }\r\n  \r\n  // 设置资料监听器\r\n  setupProfileListeners()\r\n  \r\n  // 检查并创建当前用户的资料\r\n  await autoCreateMissingProfiles()\r\n  \r\n  console.log('✅ 用户资料系统初始化完成')\r\n}","import { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport { supabase } from '@/services/supabase'\r\nimport type { User } from '@supabase/supabase-js'\r\nimport { \r\n  ensureProfileExists, \r\n  getMockProfile, \r\n  checkProfilesTableExists \r\n} from '@/utils/profileManager'\r\n\r\ninterface Profile {\r\n  id: string\r\n  username: string\r\n  avatar_url: string | null\r\n  level: number\r\n  experience_points: number\r\n  created_at: string\r\n}\r\n\r\nexport const useAuthStore = defineStore('auth', () => {\r\n  const user = ref<User | null>(null)\r\n  const profile = ref<Profile | null>(null)\r\n  const isLoading = ref(false)\r\n\r\n  const isAuthenticated = computed(() => !!user.value)\r\n  const currentLevel = computed(() => profile.value?.level || 1)\r\n  const experiencePoints = computed(() => profile.value?.experience_points || 0)\r\n\r\n  // 初始化认证状态\r\n  const initializeAuth = async () => {\r\n    try {\r\n      const { data: { session }, error } = await supabase.auth.getSession()\r\n      \r\n      // 如果是默认配置导致的错误，跳过认证初始化\r\n      if (error && supabase.supabaseUrl.includes('default.supabase.co')) {\r\n        console.warn('使用默认Supabase配置，跳过认证初始化')\r\n        return\r\n      }\r\n      \r\n      if (session?.user) {\r\n        user.value = session.user\r\n        await fetchProfile()\r\n      }\r\n    } catch (error) {\r\n      console.warn('认证初始化失败:', error)\r\n    }\r\n  }\r\n\r\n  // 获取用户资料\r\n  const fetchProfile = async () => {\r\n    if (!user.value) return\r\n    \r\n    try {\r\n      // 检查是否使用默认配置\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n      \r\n      if (!supabaseUrl || !supabaseKey || \r\n          supabaseUrl.includes('default.supabase.co') || \r\n          supabaseKey.includes('default')) {\r\n        // 开发模式：使用模拟资料\r\n        const mockProfile = getMockProfile(user.value.id)\r\n        if (mockProfile) {\r\n          profile.value = mockProfile\r\n          return\r\n        }\r\n      }\r\n      \r\n      // 真实环境：尝试获取资料，如果不存在则自动创建\r\n      const profileResult = await ensureProfileExists(user.value)\r\n      \r\n      if (profileResult.success && profileResult.profile) {\r\n        profile.value = profileResult.profile\r\n        console.log('✅ 用户资料获取/创建成功')\r\n      } else {\r\n        console.warn('⚠️ 用户资料获取失败，使用默认资料')\r\n        \r\n        // 检查是否是权限问题（403/406错误）\r\n        if (profileResult.error && (profileResult.error.includes('403') || profileResult.error.includes('406') || profileResult.error.includes('permission'))) {\r\n          console.warn('🔒 数据库权限受限，使用本地资料模式')\r\n        }\r\n        \r\n        // 使用默认资料\r\n        profile.value = {\r\n          id: user.value.id,\r\n          username: user.value.email?.split('@')[0] || user.value.user_metadata?.username || 'user',\r\n          avatar_url: null,\r\n          level: 1,\r\n          experience_points: 0,\r\n          created_at: new Date().toISOString()\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 获取用户资料失败:', error)\r\n      \r\n      // 出错时使用默认资料\r\n      profile.value = {\r\n        id: user.value.id,\r\n        username: user.value.email?.split('@')[0] || 'user',\r\n        avatar_url: null,\r\n        level: 1,\r\n        experience_points: 0,\r\n        created_at: new Date().toISOString()\r\n      }\r\n    }\r\n  }\r\n\r\n  // 登录\r\n  const signIn = async (email: string, password: string) => {\r\n    isLoading.value = true\r\n    try {\r\n      // 检查是否使用默认配置或数据库未就绪\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n      \r\n      // 如果配置无效，使用开发模式模拟\r\n      if (!supabaseUrl || !supabaseKey || \r\n          supabaseUrl.includes('default.supabase.co') || \r\n          supabaseKey.includes('default')) {\r\n        console.warn('开发模式：模拟登录流程（真实Supabase配置无效）')\r\n        \r\n        // 模拟用户数据\r\n        user.value = {\r\n          id: 'dev-user-id',\r\n          email: email,\r\n          user_metadata: { username: 'devuser' }\r\n        } as any\r\n        \r\n        profile.value = {\r\n          id: 'dev-user-id',\r\n          username: 'devuser',\r\n          avatar_url: null,\r\n          level: 1,\r\n          experience_points: 0,\r\n          created_at: new Date().toISOString()\r\n        }\r\n        \r\n        return { success: true }\r\n      }\r\n      \r\n      // 真实环境：调用Supabase认证\r\n      console.log('🔐 尝试真实Supabase登录...')\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password\r\n      })\r\n      \r\n      if (error) {\r\n        console.error('Supabase登录错误:', error)\r\n        \r\n        // 如果是配置问题，回退到开发模式\r\n        if (error.status === 400 || error.message.includes('Invalid')) {\r\n          console.warn('Supabase配置无效，回退到开发模式')\r\n          \r\n          // 模拟用户数据\r\n          user.value = {\r\n            id: 'dev-user-id',\r\n            email: email,\r\n            user_metadata: { username: 'devuser' }\r\n          } as any\r\n          \r\n          profile.value = {\r\n            id: 'dev-user-id',\r\n            username: 'devuser',\r\n            avatar_url: null,\r\n            level: 1,\r\n            experience_points: 0,\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          return { success: true }\r\n        }\r\n        \r\n        throw error\r\n      }\r\n      \r\n      if (data.user) {\r\n        user.value = data.user\r\n        await fetchProfile()\r\n        console.log('✅ 真实Supabase登录成功')\r\n      }\r\n      \r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('登录错误:', error)\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 注册\r\n  const signUp = async (email: string, password: string, username: string) => {\r\n    isLoading.value = true\r\n    try {\r\n      // 检查是否使用默认配置或数据库未就绪\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n      \r\n      // 如果配置无效，使用开发模式模拟\r\n      if (!supabaseUrl || !supabaseKey || \r\n          supabaseUrl.includes('default.supabase.co') || \r\n          supabaseKey.includes('default')) {\r\n        console.warn('开发模式：模拟注册流程（真实Supabase配置无效）')\r\n        \r\n        // 开发模式下创建模拟用户资料\r\n        const mockUser = {\r\n          id: 'mock-' + Date.now(),\r\n          email: email,\r\n          user_metadata: { username }\r\n        }\r\n        \r\n        // 确保模拟资料存在\r\n        const profileResult = await ensureProfileExists(mockUser)\r\n        \r\n        if (profileResult.success) {\r\n          console.log('✅ 开发模式：用户资料创建成功')\r\n        }\r\n        \r\n        // 模拟注册成功\r\n        return { \r\n          success: true,\r\n          message: '开发模式：注册成功（模拟）',\r\n          user: mockUser\r\n        }\r\n      }\r\n      \r\n      // 真实环境：调用Supabase注册\r\n      console.log('🔐 尝试真实Supabase注册...')\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        options: {\r\n          data: { username }\r\n        }\r\n      })\r\n      \r\n      if (error) {\r\n        console.error('Supabase注册错误:', error)\r\n        \r\n        // 如果是配置问题，回退到开发模式\r\n        if (error.status === 400 || error.message.includes('Invalid')) {\r\n          console.warn('Supabase配置无效，回退到开发模式')\r\n          \r\n          // 开发模式下创建模拟用户资料\r\n          const mockUser = {\r\n            id: 'mock-' + Date.now(),\r\n            email: email,\r\n            user_metadata: { username }\r\n          }\r\n          \r\n          // 确保模拟资料存在\r\n          const profileResult = await ensureProfileExists(mockUser)\r\n          \r\n          if (profileResult.success) {\r\n            console.log('✅ 开发模式：用户资料创建成功')\r\n          }\r\n          \r\n          return { \r\n            success: true,\r\n            message: '开发模式：注册成功（模拟）',\r\n            user: mockUser\r\n          }\r\n        }\r\n        \r\n        throw error\r\n      }\r\n      \r\n      console.log('✅ 真实Supabase注册成功')\r\n      \r\n      // 如果注册成功且有用户数据，确保用户资料存在\r\n      if (data.user) {\r\n        console.log('👤 确保新注册用户的资料存在...')\r\n        const profileResult = await ensureProfileExists(data.user)\r\n        \r\n        if (profileResult.success) {\r\n          console.log('✅ 用户资料创建/获取成功')\r\n        } else {\r\n          console.warn('⚠️ 用户资料创建失败:', profileResult.error)\r\n        }\r\n      }\r\n      \r\n      return { success: true, user: data.user }\r\n    } catch (error: any) {\r\n      console.error('注册错误:', error)\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 登出\r\n  const signOut = async () => {\r\n    const { error } = await supabase.auth.signOut()\r\n    if (!error) {\r\n      user.value = null\r\n      profile.value = null\r\n    }\r\n  }\r\n\r\n  // 监听认证状态变化\r\n  supabase.auth.onAuthStateChange(async (event, session) => {\r\n    if (event === 'SIGNED_IN' && session?.user) {\r\n      user.value = session.user\r\n      await fetchProfile()\r\n    } else if (event === 'SIGNED_OUT') {\r\n      user.value = null\r\n      profile.value = null\r\n    }\r\n  })\r\n\r\n  return {\r\n    user,\r\n    profile,\r\n    isLoading,\r\n    isAuthenticated,\r\n    currentLevel,\r\n    experiencePoints,\r\n    initializeAuth,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n    fetchProfile\r\n  }\r\n})"],"names":["ensureProfileExists","user","existingProfile","fetchError","supabase","mockProfile","_a","_b","mockProfiles","username","_c","_d","profileData","newProfile","createError","uniqueUsername","retryProfile","retryError","errorDetails","error","getMockProfile","userId","useAuthStore","defineStore","ref","profile","isLoading","isAuthenticated","computed","currentLevel","experiencePoints","initializeAuth","session","fetchProfile","supabaseUrl","supabaseKey","profileResult","signIn","email","password","data","signUp","mockUser","signOut","event"],"mappings":"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"}