import{I as S,r as y,x as c,J as i,y as w}from"./index-02sh5J2l.js";const x=S("bookmarks",()=>{const k=y([]),h=y(!1),m=y(["默认收藏夹"]),B=async(o,e=1,s=20)=>{var a;h.value=!0;try{const{data:{user:t}}=await c.auth.getUser();if(!t)throw new Error("用户未登录");console.log(`获取收藏数据，用户ID: ${t.id}, 收藏夹: ${o||"全部"}`);let l=c.from("bookmarks").select("*").eq("user_id",t.id).order("created_at",{ascending:!1});o&&(l=l.eq("folder_name",o));const{data:d,error:u}=await i(()=>l.range((e-1)*s,e*s-1));if(u)throw console.error("查询收藏记录失败:",u),u;console.log("原始收藏数据:",d);const f=[];for(const r of d||[]){let n=null;try{if(r.target_type==="post"){console.log(`正在获取帖子 ${r.target_id} 的数据`);const{data:_,error:g}=await i(()=>c.from("posts").select("id, title, content, created_at, like_count, comment_count").eq("id",r.target_id).single());g?(console.warn(`无法找到帖子 ${r.target_id}:`,g),n={id:r.target_id,title:"帖子已被删除",content:"此帖子已被原作者删除，但收藏记录保留",created_at:r.created_at,like_count:0,comment_count:0}):(console.log("成功获取帖子数据:",_),n=_)}else if(r.target_type==="comment"){const{data:_,error:g}=await i(()=>c.from("comments").select("id, content, created_at, like_count, post_id, posts!inner(title)").eq("id",r.target_id).single());g?(console.warn(`无法找到评论 ${r.target_id}:`,g),n={id:r.target_id,content:"此评论已被删除，但收藏记录保留",created_at:r.created_at,like_count:0,post_id:null,post_title:"原帖子已被删除"}):n={..._,post_title:((a=_.posts)==null?void 0:a.title)||"未知帖子"}}n||(n={id:r.target_id,title:"数据加载失败",content:"无法加载内容，请稍后重试",created_at:r.created_at,like_count:0,comment_count:0})}catch(_){console.error(`处理收藏记录 ${r.id} 时出错:`,_),n={id:r.target_id,title:"加载失败",content:"加载内容时出错，请刷新页面重试",created_at:r.created_at,like_count:0,comment_count:0}}f.push({...r,target_data:n})}return k.value=f,console.log(`获取到 ${f.length} 个收藏记录`,f),{success:!0,data:f}}catch(t){return console.error("获取收藏失败:",t),{success:!1,error:w(t)}}finally{h.value=!1}},F=B,q=async()=>{try{const{data:{user:o}}=await c.auth.getUser();if(!o)return console.log("fetchAllFolderCounts: 用户未登录，返回空计数"),{};console.log("fetchAllFolderCounts: 获取用户收藏夹计数，用户ID:",o.id);const{data:e,error:s}=await i(()=>c.from("bookmarks").select("folder_name").eq("user_id",o.id));if(s)return console.error("fetchAllFolderCounts: 获取收藏夹计数失败:",s),{};const a={};return e&&e.forEach(t=>{a[t.folder_name]=(a[t.folder_name]||0)+1}),console.log("fetchAllFolderCounts: 获取到的收藏夹计数:",a),a}catch(o){return console.error("fetchAllFolderCounts: 获取收藏夹计数失败:",o),{}}},D=async()=>{h.value=!0;try{const{data:{user:o}}=await c.auth.getUser();if(!o)throw new Error("用户未登录");console.log("获取用户所有收藏数据，用户ID:",o.id);const{data:e,error:s}=await i(()=>c.from("bookmarks").select("*").eq("user_id",o.id).order("created_at",{ascending:!1}));if(s)throw console.error("查询收藏记录失败:",s),s;if(!e||e.length===0)return console.log("用户没有收藏记录"),{success:!0,data:[],folderCounts:{}};console.log(`获取到 ${e.length} 条收藏记录`);const a=e.filter(r=>r.target_type==="post").map(r=>r.target_id),t=e.filter(r=>r.target_type==="comment").map(r=>r.target_id),l={};if(a.length>0){const{data:r,error:n}=await i(()=>c.from("posts").select("id, title, content, created_at, like_count, comment_count").in("id",a));n?console.error("批量获取帖子失败:",n):r&&r.forEach(_=>{l[_.id]=_})}const d={};if(t.length>0){const{data:r,error:n}=await i(()=>c.from("comments").select("id, content, created_at, like_count, post_id, posts!inner(title)").in("id",t));n?console.error("批量获取评论失败:",n):r&&r.forEach(_=>{var g;d[_.id]={..._,post_title:((g=_.posts)==null?void 0:g.title)||"未知帖子"}})}const u=e.map(r=>{let n=null;return r.target_type==="post"?n=l[r.target_id]||{id:r.target_id,title:"帖子已被删除",content:"此帖子已被原作者删除，但收藏记录保留",created_at:r.created_at,like_count:0,comment_count:0}:r.target_type==="comment"&&(n=d[r.target_id]||{id:r.target_id,content:"此评论已被删除，但收藏记录保留",created_at:r.created_at,like_count:0,post_id:null,post_title:"原帖子已被删除"}),{...r,target_data:n}}),f={};return u.forEach(r=>{f[r.folder_name]=(f[r.folder_name]||0)+1}),k.value=u,console.log(`成功处理 ${u.length} 条收藏记录`),{success:!0,data:u,folderCounts:f}}catch(o){return console.error("获取所有收藏失败:",o),{success:!1,error:w(o),data:[],folderCounts:{}}}finally{h.value=!1}},b=async(o,e,s="默认收藏夹",a)=>{try{const{data:{user:t}}=await c.auth.getUser();if(!t)throw new Error("用户未登录");console.log("addBookmark: 开始收藏",{targetType:o,targetId:e,folderName:s});const l=await p(o,e);if(console.log("addBookmark: 检查收藏状态",l),l)return console.log("addBookmark: 帖子已收藏"),{success:!0,data:null,message:"已收藏"};try{console.log("addBookmark: 检查收藏夹是否存在");const{data:f,error:r}=await i(()=>c.from("bookmark_folders").select("id").eq("user_id",t.id).eq("name",s).single());if(r&&r.code==="PGRST116"){console.log("addBookmark: 创建新收藏夹",s);const{error:n}=await i(()=>c.from("bookmark_folders").insert({user_id:t.id,name:s}));n?console.log("addBookmark: 创建收藏夹失败，但继续收藏操作",n):console.log("addBookmark: 收藏夹创建成功")}else r&&console.log("addBookmark: 检查收藏夹时出错，但继续收藏操作",r)}catch{console.log("bookmark_folders表不存在或不可访问，跳过收藏夹检查")}console.log("addBookmark: 执行插入操作");const{data:d,error:u}=await i(()=>c.from("bookmarks").insert({user_id:t.id,target_type:o,target_id:e,folder_name:s,note:a}).select().single());if(console.log("addBookmark: 插入结果",{data:d,error:u}),u){if(console.log("addBookmark: 处理错误",u),u.code==="23505")return{success:!0,data:null,message:"已收藏"};throw u}return d&&k.value.unshift(d),console.log("addBookmark: 收藏成功"),{success:!0,data:d}}catch(t){return console.error("addBookmark: 添加收藏失败:",t),{success:!1,error:w(t)}}},v=async o=>{try{const{error:e}=await i(()=>c.from("bookmarks").delete().eq("id",o));if(e)throw e;return k.value=k.value.filter(s=>s.id!==o),{success:!0}}catch(e){return console.error("移除收藏失败:",e),{success:!1,error:w(e)}}},p=async(o,e)=>{try{const{data:{user:s}}=await c.auth.getUser();if(!s)return!1;const{data:a,error:t}=await i(()=>c.from("bookmarks").select("id, folder_name, note").eq("user_id",s.id).eq("target_type",o).eq("target_id",e).limit(1));return t?(console.error("检查收藏状态失败:",t),!1):a&&a.length>0}catch(s){return console.error("检查收藏状态失败:",s),!1}},U=async(o,e,s="默认收藏夹",a)=>{if(await p(o,e)){const l=k.value.find(d=>d.target_type===o&&d.target_id===e);return l?await v(l.id):{success:!1,error:"找不到收藏记录"}}else return await b(o,e,s,a)},C=async()=>{try{const{data:{user:o}}=await c.auth.getUser();if(!o){m.value=["默认收藏夹"];return}console.log("fetchFolders: 获取用户收藏夹，用户ID:",o.id);let e=[];try{const{data:t,error:l}=await i(()=>c.from("bookmark_folders").select("name").eq("user_id",o.id).order("created_at",{ascending:!0}));!l&&t&&(e=t.map(d=>d.name),console.log("fetchFolders: 从bookmark_folders表获取到收藏夹:",e))}catch{console.log("fetchFolders: bookmark_folders表不存在或不可访问，使用回退方法")}const{data:s,error:a}=await i(()=>c.from("bookmarks").select("folder_name").eq("user_id",o.id));if(!a&&s){const t=[...new Set(s.map(d=>d.folder_name))];console.log("fetchFolders: 从bookmarks表获取到收藏夹:",t);const l=new Set([...e,...t]);e=Array.from(l)}e.length===0&&(e=["默认收藏夹"],console.log("fetchFolders: 没有找到收藏夹，使用默认收藏夹")),m.value=e,console.log("fetchFolders: 最终收藏夹列表:",e);try{const{data:t,error:l}=await i(()=>c.from("bookmark_folders").select("name").eq("user_id",o.id));if(!l&&t){const d=t.map(f=>f.name),u=e.filter(f=>!d.includes(f));console.log("fetchFolders: 需要同步到bookmark_folders表的收藏夹:",u);for(const f of u)await E(f)}}catch{console.log("fetchFolders: 无法同步收藏夹到bookmark_folders表，但这不影响功能")}}catch(o){console.error("fetchFolders: 获取收藏夹失败:",o);try{const{data:{user:e}}=await c.auth.getUser();if(!e){m.value=["默认收藏夹"];return}const{data:s,error:a}=await i(()=>c.from("bookmarks").select("folder_name").eq("user_id",e.id));if(a)throw a;const t=[...new Set((s||[]).map(l=>l.folder_name))];m.value=t.length>0?t:["默认收藏夹"],console.log("fetchFolders: 回退方法获取到的收藏夹:",m.value)}catch(e){console.error("fetchFolders: 获取收藏夹失败（回退方法）:",e),m.value=["默认收藏夹"]}}},E=async o=>{if(m.value.includes(o))return{success:!1,error:"收藏夹已存在"};try{const{data:{user:e}}=await c.auth.getUser();if(!e)throw new Error("用户未登录");try{const{data:s,error:a}=await i(()=>c.from("bookmark_folders").insert({user_id:e.id,name:o}).select("id").single());if(a)throw console.log("bookmark_folders表操作失败，使用回退方法:",a),a}catch{return console.log("bookmark_folders表不存在或不可访问，使用回退方法"),m.value.includes(o)||m.value.push(o),{success:!0}}return m.value.includes(o)||m.value.push(o),{success:!0}}catch(e){return console.error("创建收藏夹失败:",e),m.value.includes(o)||m.value.push(o),{success:!0}}};return{bookmarks:k,isLoading:h,folders:m,fetchBookmarks:B,getUserBookmarks:F,addBookmark:b,removeBookmark:v,checkIsBookmarked:p,toggleBookmark:U,fetchFolders:C,createFolder:E,updateBookmarkNote:async(o,e)=>{try{const{error:s}=await i(()=>c.from("bookmarks").update({note:e,updated_at:new Date().toISOString()}).eq("id",o));if(s)throw s;const a=k.value.find(t=>t.id===o);return a&&(a.note=e),{success:!0}}catch(s){return console.error("更新收藏备注失败:",s),{success:!1,error:w(s)}}},fetchAllFolderCounts:q,fetchAllUserBookmarks:D}});export{x as u};
//# sourceMappingURL=bookmarks-DOOoFvsV.js.map
