{"version":3,"file":"bookmarks-DOOoFvsV.js","sources":["../../src/stores/bookmarks.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { supabase, withRetry, handleSupabaseError } from '@/services/supabase'\r\nimport type { Database } from '@/types/supabase'\r\n\r\ninterface Bookmark {\r\n  id: string\r\n  user_id: string\r\n  target_type: 'post' | 'comment'\r\n  target_id: string\r\n  folder_name: string\r\n  note?: string\r\n  created_at: string\r\n  target_data?: any // 关联的帖子或评论数据\r\n}\r\n\r\nexport const useBookmarkStore = defineStore('bookmarks', () => {\r\n  const bookmarks = ref<Bookmark[]>([])\r\n  const isLoading = ref(false)\r\n  const folders = ref<string[]>(['默认收藏夹'])\r\n\r\n  // 获取用户收藏\r\n  const fetchBookmarks = async (folder?: string, page = 1, limit = 20) => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      console.log(`获取收藏数据，用户ID: ${user.id}, 收藏夹: ${folder || '全部'}`)\r\n\r\n      let query = supabase\r\n        .from('bookmarks')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (folder) {\r\n        query = query.eq('folder_name', folder)\r\n      }\r\n\r\n      const { data, error } = await withRetry(() =>\r\n        query.range((page - 1) * limit, page * limit - 1)\r\n      )\r\n\r\n      if (error) {\r\n        console.error('查询收藏记录失败:', error)\r\n        throw error\r\n      }\r\n\r\n      console.log(`原始收藏数据:`, data)\r\n\r\n      // 分别获取关联的帖子和评论数据\r\n      const processedBookmarks = []\r\n      \r\n      for (const bookmark of (data || [])) {\r\n        let target_data = null\r\n        \r\n        try {\r\n          if (bookmark.target_type === 'post') {\r\n            console.log(`正在获取帖子 ${bookmark.target_id} 的数据`)\r\n            const { data: postData, error: postError } = await withRetry(() =>\r\n              supabase\r\n                .from('posts')\r\n                .select('id, title, content, created_at, like_count, comment_count')\r\n                .eq('id', bookmark.target_id)\r\n                .single()\r\n            )\r\n            \r\n            if (postError) {\r\n              console.warn(`无法找到帖子 ${bookmark.target_id}:`, postError)\r\n              // 如果帖子不存在，创建一个占位符数据\r\n              target_data = {\r\n                id: bookmark.target_id,\r\n                title: '帖子已被删除',\r\n                content: '此帖子已被原作者删除，但收藏记录保留',\r\n                created_at: bookmark.created_at,\r\n                like_count: 0,\r\n                comment_count: 0\r\n              }\r\n            } else {\r\n              console.log(`成功获取帖子数据:`, postData)\r\n              target_data = postData\r\n            }\r\n          } else if (bookmark.target_type === 'comment') {\r\n            const { data: commentData, error: commentError } = await withRetry(() =>\r\n              supabase\r\n                .from('comments')\r\n                .select('id, content, created_at, like_count, post_id, posts!inner(title)')\r\n                .eq('id', bookmark.target_id)\r\n                .single()\r\n            )\r\n            \r\n            if (commentError) {\r\n              console.warn(`无法找到评论 ${bookmark.target_id}:`, commentError)\r\n              // 如果评论不存在，创建一个占位符数据\r\n              target_data = {\r\n                id: bookmark.target_id,\r\n                content: '此评论已被删除，但收藏记录保留',\r\n                created_at: bookmark.created_at,\r\n                like_count: 0,\r\n                post_id: null,\r\n                post_title: '原帖子已被删除'\r\n              }\r\n            } else {\r\n              target_data = {\r\n                ...commentData,\r\n                post_title: commentData.posts?.title || '未知帖子'\r\n              }\r\n            }\r\n          }\r\n          \r\n          // 确保target_data不为null，这样UI可以正确显示\r\n          if (!target_data) {\r\n            target_data = {\r\n              id: bookmark.target_id,\r\n              title: '数据加载失败',\r\n              content: '无法加载内容，请稍后重试',\r\n              created_at: bookmark.created_at,\r\n              like_count: 0,\r\n              comment_count: 0\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`处理收藏记录 ${bookmark.id} 时出错:`, error)\r\n          // 创建错误占位符\r\n          target_data = {\r\n            id: bookmark.target_id,\r\n            title: '加载失败',\r\n            content: '加载内容时出错，请刷新页面重试',\r\n            created_at: bookmark.created_at,\r\n            like_count: 0,\r\n            comment_count: 0\r\n          }\r\n        }\r\n        \r\n        processedBookmarks.push({\r\n          ...bookmark,\r\n          target_data\r\n        })\r\n      }\r\n\r\n      bookmarks.value = processedBookmarks\r\n      console.log(`获取到 ${processedBookmarks.length} 个收藏记录`, processedBookmarks)\r\n      return { success: true, data: processedBookmarks }\r\n    } catch (error: any) {\r\n      console.error('获取收藏失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 获取用户收藏（别名，用于组件调用）\r\n  const getUserBookmarks = fetchBookmarks\r\n\r\n  // 获取所有收藏夹的计数\r\n  const fetchAllFolderCounts = async () => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) {\r\n        console.log('fetchAllFolderCounts: 用户未登录，返回空计数')\r\n        return {}\r\n      }\r\n\r\n      console.log('fetchAllFolderCounts: 获取用户收藏夹计数，用户ID:', user.id)\r\n\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .select('folder_name')\r\n          .eq('user_id', user.id)\r\n      )\r\n\r\n      if (error) {\r\n        console.error('fetchAllFolderCounts: 获取收藏夹计数失败:', error)\r\n        return {}\r\n      }\r\n\r\n      const counts: { [key: string]: number } = {}\r\n      if (data) {\r\n        data.forEach(bookmark => {\r\n          counts[bookmark.folder_name] = (counts[bookmark.folder_name] || 0) + 1\r\n        })\r\n      }\r\n\r\n      console.log('fetchAllFolderCounts: 获取到的收藏夹计数:', counts)\r\n      return counts\r\n    } catch (error) {\r\n      console.error('fetchAllFolderCounts: 获取收藏夹计数失败:', error)\r\n      return {}\r\n    }\r\n  }\r\n\r\n  // 一次性获取用户所有收藏数据（包括关联的帖子和评论数据）\r\n  const fetchAllUserBookmarks = async () => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      console.log('获取用户所有收藏数据，用户ID:', user.id)\r\n\r\n      // 获取所有收藏记录\r\n      const { data: bookmarkRecords, error: bookmarkError } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .order('created_at', { ascending: false })\r\n      )\r\n\r\n      if (bookmarkError) {\r\n        console.error('查询收藏记录失败:', bookmarkError)\r\n        throw bookmarkError\r\n      }\r\n\r\n      if (!bookmarkRecords || bookmarkRecords.length === 0) {\r\n        console.log('用户没有收藏记录')\r\n        return { success: true, data: [], folderCounts: {} }\r\n      }\r\n\r\n      console.log(`获取到 ${bookmarkRecords.length} 条收藏记录`)\r\n\r\n      // 按类型分组处理\r\n      const postIds = bookmarkRecords\r\n        .filter(b => b.target_type === 'post')\r\n        .map(b => b.target_id)\r\n      \r\n      const commentIds = bookmarkRecords\r\n        .filter(b => b.target_type === 'comment')\r\n        .map(b => b.target_id)\r\n\r\n      // 批量获取帖子数据\r\n      const postsData: { [key: string]: any } = {}\r\n      if (postIds.length > 0) {\r\n        const { data: posts, error: postsError } = await withRetry(() =>\r\n          supabase\r\n            .from('posts')\r\n            .select('id, title, content, created_at, like_count, comment_count')\r\n            .in('id', postIds)\r\n        )\r\n\r\n        if (postsError) {\r\n          console.error('批量获取帖子失败:', postsError)\r\n        } else if (posts) {\r\n          posts.forEach(post => {\r\n            postsData[post.id] = post\r\n          })\r\n        }\r\n      }\r\n\r\n      // 批量获取评论数据\r\n      const commentsData: { [key: string]: any } = {}\r\n      if (commentIds.length > 0) {\r\n        const { data: comments, error: commentsError } = await withRetry(() =>\r\n          supabase\r\n            .from('comments')\r\n            .select('id, content, created_at, like_count, post_id, posts!inner(title)')\r\n            .in('id', commentIds)\r\n        )\r\n\r\n        if (commentsError) {\r\n          console.error('批量获取评论失败:', commentsError)\r\n        } else if (comments) {\r\n          comments.forEach(comment => {\r\n            commentsData[comment.id] = {\r\n              ...comment,\r\n              post_title: comment.posts?.title || '未知帖子'\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      // 处理所有收藏记录\r\n      const processedBookmarks = bookmarkRecords.map(bookmark => {\r\n        let target_data = null\r\n        \r\n        if (bookmark.target_type === 'post') {\r\n          target_data = postsData[bookmark.target_id] || {\r\n            id: bookmark.target_id,\r\n            title: '帖子已被删除',\r\n            content: '此帖子已被原作者删除，但收藏记录保留',\r\n            created_at: bookmark.created_at,\r\n            like_count: 0,\r\n            comment_count: 0\r\n          }\r\n        } else if (bookmark.target_type === 'comment') {\r\n          target_data = commentsData[bookmark.target_id] || {\r\n            id: bookmark.target_id,\r\n            content: '此评论已被删除，但收藏记录保留',\r\n            created_at: bookmark.created_at,\r\n            like_count: 0,\r\n            post_id: null,\r\n            post_title: '原帖子已被删除'\r\n          }\r\n        }\r\n\r\n        return {\r\n          ...bookmark,\r\n          target_data\r\n        }\r\n      })\r\n\r\n      // 计算每个收藏夹的计数\r\n      const folderCounts: { [key: string]: number } = {}\r\n      processedBookmarks.forEach(bookmark => {\r\n        folderCounts[bookmark.folder_name] = (folderCounts[bookmark.folder_name] || 0) + 1\r\n      })\r\n\r\n      // 更新本地状态\r\n      bookmarks.value = processedBookmarks\r\n\r\n      console.log(`成功处理 ${processedBookmarks.length} 条收藏记录`)\r\n      return { \r\n        success: true, \r\n        data: processedBookmarks,\r\n        folderCounts \r\n      }\r\n    } catch (error: any) {\r\n      console.error('获取所有收藏失败:', error)\r\n      return { success: false, error: handleSupabaseError(error), data: [], folderCounts: {} }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 添加收藏\r\n  const addBookmark = async (\r\n    targetType: 'post' | 'comment',\r\n    targetId: string,\r\n    folderName = '默认收藏夹',\r\n    note?: string\r\n  ) => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      console.log('addBookmark: 开始收藏', { targetType, targetId, folderName })\r\n\r\n      // 首先检查是否已经收藏\r\n      const existingBookmark = await checkIsBookmarked(targetType, targetId)\r\n      console.log('addBookmark: 检查收藏状态', existingBookmark)\r\n      \r\n      if (existingBookmark) {\r\n        console.log('addBookmark: 帖子已收藏')\r\n        return { success: true, data: null, message: '已收藏' }\r\n      }\r\n\r\n      // 尝试确保收藏夹存在于bookmark_folders表中\r\n      try {\r\n        console.log('addBookmark: 检查收藏夹是否存在')\r\n        const { data: folderData, error: folderError } = await withRetry(() =>\r\n          supabase\r\n            .from('bookmark_folders')\r\n            .select('id')\r\n            .eq('user_id', user.id)\r\n            .eq('name', folderName)\r\n            .single()\r\n        )\r\n\r\n        if (folderError && folderError.code === 'PGRST116') {\r\n          // 收藏夹不存在，创建它\r\n          console.log('addBookmark: 创建新收藏夹', folderName)\r\n          const { error: createError } = await withRetry(() =>\r\n            supabase\r\n              .from('bookmark_folders')\r\n              .insert({\r\n                user_id: user.id,\r\n                name: folderName\r\n              })\r\n          )\r\n\r\n          if (createError) {\r\n            console.log('addBookmark: 创建收藏夹失败，但继续收藏操作', createError)\r\n          } else {\r\n            console.log('addBookmark: 收藏夹创建成功')\r\n          }\r\n        } else if (folderError) {\r\n          console.log('addBookmark: 检查收藏夹时出错，但继续收藏操作', folderError)\r\n        }\r\n      } catch (folderTableError) {\r\n        console.log('bookmark_folders表不存在或不可访问，跳过收藏夹检查')\r\n      }\r\n\r\n      console.log('addBookmark: 执行插入操作')\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .insert({\r\n            user_id: user.id,\r\n            target_type: targetType,\r\n            target_id: targetId,\r\n            folder_name: folderName,\r\n            note\r\n          })\r\n          .select()\r\n          .single()\r\n      )\r\n\r\n      console.log('addBookmark: 插入结果', { data, error })\r\n\r\n      if (error) {\r\n        console.log('addBookmark: 处理错误', error)\r\n        // 处理各种可能的错误\r\n        if (error.code === '23505') {\r\n          return { success: true, data: null, message: '已收藏' }\r\n        }\r\n        throw error\r\n      }\r\n\r\n      // 更新本地状态\r\n      if (data) {\r\n        bookmarks.value.unshift(data)\r\n      }\r\n\r\n      console.log('addBookmark: 收藏成功')\r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('addBookmark: 添加收藏失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 移除收藏\r\n  const removeBookmark = async (bookmarkId: string) => {\r\n    try {\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .delete()\r\n          .eq('id', bookmarkId)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 更新本地状态\r\n      bookmarks.value = bookmarks.value.filter(b => b.id !== bookmarkId)\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('移除收藏失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 检查是否已收藏\r\n  const checkIsBookmarked = async (targetType: 'post' | 'comment', targetId: string) => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) return false\r\n\r\n      // 使用limit(1)而不是single()来避免406错误\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .select('id, folder_name, note')\r\n          .eq('user_id', user.id)\r\n          .eq('target_type', targetType)\r\n          .eq('target_id', targetId)\r\n          .limit(1)\r\n      )\r\n\r\n      if (error) {\r\n        console.error('检查收藏状态失败:', error)\r\n        return false\r\n      }\r\n\r\n      return data && data.length > 0\r\n    } catch (error) {\r\n      console.error('检查收藏状态失败:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // 切换收藏状态\r\n  const toggleBookmark = async (\r\n    targetType: 'post' | 'comment',\r\n    targetId: string,\r\n    folderName = '默认收藏夹',\r\n    note?: string\r\n  ) => {\r\n    const isBookmarked = await checkIsBookmarked(targetType, targetId)\r\n    \r\n    if (isBookmarked) {\r\n      // 找到收藏记录并删除\r\n      const bookmark = bookmarks.value.find(\r\n        b => b.target_type === targetType && b.target_id === targetId\r\n      )\r\n      if (bookmark) {\r\n        return await removeBookmark(bookmark.id)\r\n      }\r\n      return { success: false, error: '找不到收藏记录' }\r\n    } else {\r\n      return await addBookmark(targetType, targetId, folderName, note)\r\n    }\r\n  }\r\n\r\n  // 获取收藏夹列表\r\n  const fetchFolders = async () => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) {\r\n        folders.value = ['默认收藏夹']\r\n        return\r\n      }\r\n\r\n      console.log('fetchFolders: 获取用户收藏夹，用户ID:', user.id)\r\n\r\n      // 首先尝试从bookmark_folders表获取收藏夹\r\n      let folderNames: string[] = []\r\n      try {\r\n        const { data: folderData, error: folderError } = await withRetry(() =>\r\n          supabase\r\n            .from('bookmark_folders')\r\n            .select('name')\r\n            .eq('user_id', user.id)\r\n            .order('created_at', { ascending: true })\r\n        )\r\n\r\n        if (!folderError && folderData) {\r\n          folderNames = folderData.map(f => f.name)\r\n          console.log('fetchFolders: 从bookmark_folders表获取到收藏夹:', folderNames)\r\n        }\r\n      } catch (folderTableError) {\r\n        console.log('fetchFolders: bookmark_folders表不存在或不可访问，使用回退方法')\r\n      }\r\n\r\n      // 然后从bookmarks表获取实际使用的收藏夹名称\r\n      const { data: bookmarkData, error: bookmarkError } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .select('folder_name')\r\n          .eq('user_id', user.id)\r\n      )\r\n\r\n      if (!bookmarkError && bookmarkData) {\r\n        const bookmarkFolders = [...new Set(bookmarkData.map(b => b.folder_name))]\r\n        console.log('fetchFolders: 从bookmarks表获取到收藏夹:', bookmarkFolders)\r\n        \r\n        // 合并两个列表，确保包含所有收藏夹\r\n        const allFolders = new Set([...folderNames, ...bookmarkFolders])\r\n        folderNames = Array.from(allFolders)\r\n      }\r\n\r\n      // 确保至少有默认收藏夹\r\n      if (folderNames.length === 0) {\r\n        folderNames = ['默认收藏夹']\r\n        console.log('fetchFolders: 没有找到收藏夹，使用默认收藏夹')\r\n      }\r\n\r\n      folders.value = folderNames\r\n      console.log('fetchFolders: 最终收藏夹列表:', folderNames)\r\n\r\n      // 尝试同步收藏夹到bookmark_folders表（如果表存在的话）\r\n      try {\r\n        const { data: folderData, error: folderError } = await withRetry(() =>\r\n          supabase\r\n            .from('bookmark_folders')\r\n            .select('name')\r\n            .eq('user_id', user.id)\r\n        )\r\n\r\n        if (!folderError && folderData) {\r\n          const existingFolderNames = folderData.map(f => f.name)\r\n          const missingFolders = folderNames.filter(name => !existingFolderNames.includes(name))\r\n          \r\n          console.log('fetchFolders: 需要同步到bookmark_folders表的收藏夹:', missingFolders)\r\n          \r\n          for (const folderName of missingFolders) {\r\n            await createFolder(folderName)\r\n          }\r\n        }\r\n      } catch (syncError) {\r\n        console.log('fetchFolders: 无法同步收藏夹到bookmark_folders表，但这不影响功能')\r\n      }\r\n    } catch (error) {\r\n      console.error('fetchFolders: 获取收藏夹失败:', error)\r\n      // 回退到简单方法\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser()\r\n        if (!user) {\r\n          folders.value = ['默认收藏夹']\r\n          return\r\n        }\r\n\r\n        const { data, error } = await withRetry(() =>\r\n          supabase\r\n            .from('bookmarks')\r\n            .select('folder_name')\r\n            .eq('user_id', user.id)\r\n        )\r\n\r\n        if (error) throw error\r\n\r\n        const uniqueFolders = [...new Set((data || []).map(b => b.folder_name))]\r\n        folders.value = uniqueFolders.length > 0 ? uniqueFolders : ['默认收藏夹']\r\n        console.log('fetchFolders: 回退方法获取到的收藏夹:', folders.value)\r\n      } catch (fallbackError) {\r\n        console.error('fetchFolders: 获取收藏夹失败（回退方法）:', fallbackError)\r\n        folders.value = ['默认收藏夹']\r\n      }\r\n    }\r\n  }\r\n\r\n  // 创建新收藏夹\r\n  const createFolder = async (folderName: string) => {\r\n    if (folders.value.includes(folderName)) {\r\n      return { success: false, error: '收藏夹已存在' }\r\n    }\r\n\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      // 尝试在bookmark_folders表中创建新收藏夹\r\n      try {\r\n        const { data, error } = await withRetry(() =>\r\n          supabase\r\n            .from('bookmark_folders')\r\n            .insert({\r\n              user_id: user.id,\r\n              name: folderName\r\n            })\r\n            .select('id')\r\n            .single()\r\n        )\r\n\r\n        if (error) {\r\n          console.log('bookmark_folders表操作失败，使用回退方法:', error)\r\n          throw error\r\n        }\r\n      } catch (folderTableError) {\r\n        console.log('bookmark_folders表不存在或不可访问，使用回退方法')\r\n        // 如果bookmark_folders表不存在或有其他错误，回退到旧方法\r\n        // 直接添加到本地收藏夹列表，这样在下次收藏时会创建该收藏夹\r\n        if (!folders.value.includes(folderName)) {\r\n          folders.value.push(folderName)\r\n        }\r\n        return { success: true }\r\n      }\r\n\r\n      // 添加到本地列表\r\n      if (!folders.value.includes(folderName)) {\r\n        folders.value.push(folderName)\r\n      }\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('创建收藏夹失败:', error)\r\n      // 即使出错也尝试添加到本地列表\r\n      if (!folders.value.includes(folderName)) {\r\n        folders.value.push(folderName)\r\n      }\r\n      return { success: true }\r\n    }\r\n  }\r\n\r\n  // 更新收藏备注\r\n  const updateBookmarkNote = async (bookmarkId: string, note: string) => {\r\n    try {\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('bookmarks')\r\n          .update({ note, updated_at: new Date().toISOString() })\r\n          .eq('id', bookmarkId)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 更新本地状态\r\n      const bookmark = bookmarks.value.find(b => b.id === bookmarkId)\r\n      if (bookmark) {\r\n        bookmark.note = note\r\n      }\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('更新收藏备注失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  return {\r\n    bookmarks,\r\n    isLoading,\r\n    folders,\r\n    fetchBookmarks,\r\n    getUserBookmarks,\r\n    addBookmark,\r\n    removeBookmark,\r\n    checkIsBookmarked,\r\n    toggleBookmark,\r\n    fetchFolders,\r\n    createFolder,\r\n    updateBookmarkNote,\r\n    fetchAllFolderCounts,\r\n    fetchAllUserBookmarks\r\n  }\r\n})"],"names":["useBookmarkStore","defineStore","bookmarks","ref","isLoading","folders","fetchBookmarks","folder","page","limit","user","supabase","query","data","error","withRetry","processedBookmarks","bookmark","target_data","postData","postError","commentData","commentError","_a","handleSupabaseError","getUserBookmarks","fetchAllFolderCounts","counts","fetchAllUserBookmarks","bookmarkRecords","bookmarkError","postIds","b","commentIds","postsData","posts","postsError","post","commentsData","comments","commentsError","comment","folderCounts","addBookmark","targetType","targetId","folderName","note","existingBookmark","checkIsBookmarked","folderData","folderError","createError","removeBookmark","bookmarkId","toggleBookmark","fetchFolders","folderNames","f","bookmarkData","bookmarkFolders","allFolders","existingFolderNames","missingFolders","name","createFolder","uniqueFolders","fallbackError"],"mappings":"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"}