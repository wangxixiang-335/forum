{"version":3,"file":"messages-DFVbLfQ6.js","sources":["../../src/stores/messages.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { supabase, handleSupabaseError } from '@/services/supabase'\r\nimport type { Database } from '@/types/supabase'\r\n\r\n// 重试函数\r\nconst withRetry = async <T>(\r\n  operation: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  delay: number = 1000\r\n): Promise<T> => {\r\n  let lastError: any\r\n  \r\n  for (let i = 0; i < maxRetries; i++) {\r\n    try {\r\n      return await operation()\r\n    } catch (error: any) {\r\n      lastError = error\r\n      \r\n      if (i === maxRetries - 1) {\r\n        throw error\r\n      }\r\n      \r\n      // 等待后重试\r\n      await new Promise(resolve => setTimeout(resolve, delay * (i + 1)))\r\n    }\r\n  }\r\n  \r\n  throw lastError\r\n}\r\n\r\ninterface Message {\r\n  id: string\r\n  sender_id: string\r\n  receiver_id: string\r\n  content: string\r\n  is_read: boolean\r\n  is_deleted_by_sender: boolean\r\n  is_deleted_by_receiver: boolean\r\n  created_at: string\r\n  updated_at: string\r\n  sender_profile?: {\r\n    username: string\r\n    avatar_url: string | null\r\n    level: number\r\n  }\r\n  receiver_profile?: {\r\n    username: string\r\n    avatar_url: string | null\r\n    level: number\r\n  }\r\n}\r\n\r\ninterface Conversation {\r\n  id: string\r\n  user1_id: string\r\n  user2_id: string\r\n  last_message_id: string | null\r\n  last_message_at: string\r\n  is_deleted_by_user1: boolean\r\n  is_deleted_by_user2: boolean\r\n  created_at: string\r\n  updated_at: string\r\n  other_user?: {\r\n    id: string\r\n    username: string\r\n    avatar_url: string | null\r\n    level: number\r\n  }\r\n  last_message?: Message\r\n  unread_count: number\r\n}\r\n\r\nexport const useMessageStore = defineStore('messages', () => {\r\n  const conversations = ref<Conversation[]>([])\r\n  const currentMessages = ref<Message[]>([])\r\n  const isLoading = ref(false)\r\n  const unreadCount = ref(0)\r\n\r\n  // 获取会话列表\r\n  const fetchConversations = async () => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      console.log('正在获取用户会话列表，用户ID:', user.id)\r\n\r\n      // 检查是否使用默认配置\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n      if (!supabaseUrl || supabaseUrl.includes('default.supabase.co')) {\r\n        console.log('开发模式：返回模拟会话数据')\r\n        \r\n        // 创建模拟会话数据\r\n        const mockConversations = [\r\n          {\r\n            id: 'conv_mock1',\r\n            user1_id: user.id,\r\n            user2_id: 'mock-user-1',\r\n            other_user: {\r\n              id: 'mock-user-1',\r\n              username: '测试用户1',\r\n              avatar_url: null,\r\n              level: 2\r\n            },\r\n            last_message: {\r\n              id: 'msg1',\r\n              content: '这是一条测试消息',\r\n              created_at: new Date(Date.now() - 3600000).toISOString(),\r\n              is_read: false\r\n            },\r\n            last_message_at: new Date(Date.now() - 3600000).toISOString(),\r\n            unread_count: 1,\r\n            messages: []\r\n          }\r\n        ]\r\n        \r\n        conversations.value = mockConversations\r\n        return { success: true, data: mockConversations }\r\n      }\r\n\r\n      // 先获取所有相关的消息，然后按对话分组\r\n      const { data: messages, error: messagesError } = await supabase\r\n        .from('messages')\r\n        .select(`\r\n          *,\r\n          sender_profile:sender_id (username, avatar_url, level),\r\n          receiver_profile:receiver_id (username, avatar_url, level)\r\n        `)\r\n        .or(`sender_id.eq.${user.id},receiver_id.eq.${user.id}`)\r\n        .eq('is_deleted_by_sender', false)\r\n        .eq('is_deleted_by_receiver', false)\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (messagesError) {\r\n        console.error('获取消息失败:', messagesError)\r\n        throw messagesError\r\n      }\r\n\r\n      console.log('获取到的消息数量:', messages?.length || 0)\r\n\r\n      // 按对话分组消息\r\n      const conversationMap = new Map()\r\n      \r\n      // 确保messages是数组\r\n      const messagesArray = Array.isArray(messages) ? messages : []\r\n      \r\n      messagesArray.forEach(message => {\r\n        const otherUserId = message.sender_id === user.id ? message.receiver_id : message.sender_id\r\n        const otherUserProfile = message.sender_id === user.id ? message.receiver_profile : message.sender_profile\r\n        \r\n        if (!conversationMap.has(otherUserId)) {\r\n          conversationMap.set(otherUserId, {\r\n            id: `conv_${otherUserId}`, // 生成一个临时会话ID\r\n            user1_id: user.id < otherUserId ? user.id : otherUserId,\r\n            user2_id: user.id > otherUserId ? user.id : otherUserId,\r\n            other_user: {\r\n              ...otherUserProfile,\r\n              id: otherUserId // 确保other_user包含id字段\r\n            },\r\n            last_message: message,\r\n            last_message_at: message.created_at,\r\n            messages: [],\r\n            unread_count: 0\r\n          })\r\n        }\r\n        \r\n        const conversation = conversationMap.get(otherUserId)\r\n        conversation.messages.push(message)\r\n        \r\n        // 如果这是最新的消息，更新最后消息信息\r\n        if (!conversation.last_message || new Date(message.created_at) > new Date(conversation.last_message.created_at)) {\r\n          conversation.last_message = message\r\n          conversation.last_message_at = message.created_at\r\n        }\r\n        \r\n        // 计算未读数量\r\n        if (message.receiver_id === user.id && !message.is_read) {\r\n          conversation.unread_count++\r\n        }\r\n      })\r\n\r\n      // 转换为数组并按时间排序\r\n      const conversationsArray: any[] = []\r\n      conversationMap.forEach((value) => {\r\n        conversationsArray.push(value)\r\n      })\r\n      \r\n      const conversationsList = conversationsArray.sort((a, b) => {\r\n        const timeA = new Date(a.last_message_at).getTime()\r\n        const timeB = new Date(b.last_message_at).getTime()\r\n        return timeB - timeA\r\n      })\r\n\r\n      console.log('处理后的会话数量:', conversationsList.length)\r\n      console.log('会话列表详情:', conversationsList)\r\n\r\n      conversations.value = conversationsList\r\n      return { success: true, data: conversationsList }\r\n    } catch (error: any) {\r\n      console.error('获取会话列表失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 获取会话消息（分页）\r\n  const fetchMessagesPaginated = async (conversationId: string, page = 1, limit = 50) => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('messages')\r\n          .select(`\r\n            *,\r\n            sender_profile:sender_id (username, avatar_url, level),\r\n            receiver_profile:receiver_id (username, avatar_url, level)\r\n          `)\r\n          .or(`sender_id.in.(select user1_id from conversations where id.eq.${conversationId}),sender_id.in.(select user2_id from conversations where id.eq.${conversationId})`)\r\n          .and(`receiver_id.in.(select user1_id from conversations where id.eq.${conversationId}),receiver_id.in.(select user2_id from conversations where id.eq.${conversationId})`)\r\n          .order('created_at', { ascending: false })\r\n          .range((page - 1) * limit, page * limit - 1)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      currentMessages.value = (data || []).reverse() // 按时间正序显示\r\n      return { success: true, data: currentMessages.value }\r\n    } catch (error: any) {\r\n      console.error('获取消息失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 发送消息\r\n  const sendMessage = async (receiverId: string, content: string) => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('messages')\r\n          .insert({\r\n            sender_id: user.id,\r\n            receiver_id: receiverId,\r\n            content: content.trim()\r\n          })\r\n          .select(`\r\n            *,\r\n            sender_profile:sender_id (username, avatar_url, level),\r\n            receiver_profile:receiver_id (username, avatar_url, level)\r\n          `)\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 更新本地状态\r\n      if (data) {\r\n        currentMessages.value.push(data)\r\n      }\r\n\r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('发送消息失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 标记消息为已读\r\n  const markMessagesAsRead = async (senderId: string) => {\r\n    try {\r\n      console.log('标记消息已读，senderId:', senderId)\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) return\r\n      \r\n      if (!senderId || senderId === 'undefined') {\r\n        console.warn('senderId 无效，跳过标记已读')\r\n        return\r\n      }\r\n\r\n      // 先尝试使用RPC函数，如果失败则使用直接更新\r\n      try {\r\n        const { error } = await supabase.rpc('mark_messages_as_read', {\r\n          p_sender_id: senderId,\r\n          p_receiver_id: user.id\r\n        })\r\n\r\n        if (error) throw error\r\n      } catch (rpcError) {\r\n        // 如果RPC函数不存在，使用直接更新\r\n        console.warn('RPC函数不存在，使用直接更新:', rpcError)\r\n        \r\n        const { error } = await withRetry(() =>\r\n          supabase\r\n            .from('messages')\r\n            .update({ is_read: true })\r\n            .eq('sender_id', senderId)\r\n            .eq('receiver_id', user.id)\r\n            .eq('is_read', false)\r\n        )\r\n\r\n        if (error) throw error\r\n      }\r\n\r\n      // 更新本地状态\r\n      currentMessages.value = currentMessages.value.map(msg => {\r\n        if (msg.sender_id === senderId && msg.receiver_id === user.id) {\r\n          return { ...msg, is_read: true }\r\n        }\r\n        return msg\r\n      })\r\n\r\n      // 更新会话列表中的未读数量\r\n      conversations.value = conversations.value.map(conv => {\r\n        if (conv.other_user?.id === senderId) {\r\n          return { ...conv, unread_count: 0 }\r\n        }\r\n        return conv\r\n      })\r\n\r\n      // 更新全局未读计数\r\n      const conversation = conversations.value.find(c => c.other_user?.id === senderId)\r\n      if (conversation && conversation.unread_count === 0) {\r\n        // 从全局未读计数中减去这个会话的未读数量\r\n        const conversationUnreadCount = currentMessages.value.filter(\r\n          msg => msg.sender_id === senderId && msg.receiver_id === user.id && !msg.is_read\r\n        ).length\r\n        \r\n        unreadCount.value = Math.max(0, unreadCount.value - conversationUnreadCount)\r\n      }\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('标记消息已读失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 获取未读消息总数\r\n  const fetchUnreadCount = async () => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) return\r\n\r\n      // 检查是否使用默认配置\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n      if (!supabaseUrl || supabaseUrl.includes('default.supabase.co')) {\r\n        console.log('开发模式：返回模拟未读数量')\r\n        unreadCount.value = 1\r\n        return { success: true, count: 1 }\r\n      }\r\n\r\n      // 先尝试使用RPC函数，如果失败则使用直接查询\r\n      let count = 0\r\n      \r\n      try {\r\n        const { data, error } = await supabase.rpc('get_unread_message_count', {\r\n          p_user_id: user.id\r\n        })\r\n        \r\n        if (!error && data) {\r\n          count = data\r\n        } else {\r\n          throw error\r\n        }\r\n      } catch (rpcError) {\r\n        // 如果RPC函数不存在，使用直接查询\r\n        console.warn('RPC函数不存在，使用直接查询:', rpcError)\r\n        \r\n        const { data, error } = await withRetry(() =>\r\n          supabase\r\n            .from('messages')\r\n            .select('*', { count: 'exact', head: true })\r\n            .eq('receiver_id', user.id)\r\n            .eq('is_read', false)\r\n            .eq('is_deleted_by_receiver', false)\r\n        )\r\n        \r\n        if (error) throw error\r\n        count = data || 0\r\n      }\r\n\r\n      unreadCount.value = count\r\n      return { success: true, count }\r\n    } catch (error: any) {\r\n      console.error('获取未读消息数量失败:', error)\r\n      // 不抛出错误，设置默认值\r\n      unreadCount.value = 0\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 删除会话\r\n  const deleteConversation = async (conversationId: string) => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      const conversation = conversations.value.find(c => c.id === conversationId)\r\n      if (!conversation) throw new Error('会话不存在')\r\n\r\n      const updateField = user.id === conversation.user1_id ? 'is_deleted_by_user1' : 'is_deleted_by_user2'\r\n\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('conversations')\r\n          .update({ [updateField]: true })\r\n          .eq('id', conversationId)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 更新本地状态\r\n      conversations.value = conversations.value.filter(c => c.id !== conversationId)\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('删除会话失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 删除消息\r\n  const deleteMessage = async (messageId: string) => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      const message = currentMessages.value.find(m => m.id === messageId)\r\n      if (!message) throw new Error('消息不存在')\r\n\r\n      const updateField = user.id === message.sender_id ? 'is_deleted_by_sender' : 'is_deleted_by_receiver'\r\n\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('messages')\r\n          .update({ [updateField]: true })\r\n          .eq('id', messageId)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 更新本地状态\r\n      currentMessages.value = currentMessages.value.filter(m => m.id !== messageId)\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('删除消息失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 搜索用户\r\n  const searchUsers = async (query: string) => {\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('profiles')\r\n          .select('id, username, avatar_url, level')\r\n          .ilike('username', `%${query}%`)\r\n          .limit(10)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      return { success: true, data: data || [] }\r\n    } catch (error: any) {\r\n      console.error('搜索用户失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 获取指定会话的消息\r\n  const fetchMessages = async (conversationId: string) => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) throw new Error('用户未登录')\r\n\r\n      console.log('获取会话消息，会话ID:', conversationId, '用户ID:', user.id)\r\n\r\n      // 检查是否使用默认配置（开发模式）\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n      if (!supabaseUrl || supabaseUrl.includes('default.supabase.co')) {\r\n        console.log('开发模式：返回模拟消息数据')\r\n        \r\n        // 开发模式下返回模拟消息\r\n        const mockMessages = [\r\n          {\r\n            id: 'msg1',\r\n            sender_id: 'mock-user-1',\r\n            receiver_id: user.id,\r\n            content: '这是一条测试消息',\r\n            is_read: false,\r\n            is_deleted_by_sender: false,\r\n            is_deleted_by_receiver: false,\r\n            created_at: new Date(Date.now() - 3600000).toISOString(),\r\n            updated_at: new Date(Date.now() - 3600000).toISOString(),\r\n            sender_profile: {\r\n              username: '测试用户1',\r\n              avatar_url: null,\r\n              level: 2\r\n            },\r\n            is_from_current_user: false\r\n          }\r\n        ]\r\n        \r\n        currentMessages.value = mockMessages\r\n        return { success: true, data: currentMessages.value }\r\n      }\r\n\r\n      // 从conversationId中提取otherUserId（因为我们使用了临时ID格式）\r\n      let otherUserId: string\r\n      if (conversationId.startsWith('conv_')) {\r\n        otherUserId = conversationId.replace('conv_', '')\r\n      } else {\r\n        // 如果是原有的会话ID，尝试从conversations表中获取\r\n        const { data: conversation, error: convError } = await withRetry(() =>\r\n          supabase\r\n            .from('conversations')\r\n            .select('*')\r\n            .eq('id', conversationId)\r\n            .single()\r\n        )\r\n\r\n        if (convError) throw convError\r\n        if (!conversation) throw new Error('会话不存在')\r\n\r\n        const isUser1 = conversation.user1_id === user.id\r\n        otherUserId = isUser1 ? conversation.user2_id : conversation.user1_id\r\n      }\r\n\r\n      // 获取消息\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select(`\r\n          *,\r\n          sender_profile:sender_id (username, avatar_url, level)\r\n        `)\r\n        .or(`and(sender_id.eq.${user.id},receiver_id.eq.${otherUserId}),and(sender_id.eq.${otherUserId},receiver_id.eq.${user.id})`)\r\n        .eq('is_deleted_by_sender', false)\r\n        .eq('is_deleted_by_receiver', false)\r\n        .order('created_at', { ascending: true })\r\n\r\n      if (error) {\r\n        console.error('获取消息失败:', error)\r\n        throw error\r\n      }\r\n\r\n      console.log('获取到的消息数量:', data?.length || 0)\r\n\r\n      const messagesWithProfiles = (data || []).map(msg => ({\r\n        ...msg,\r\n        is_from_current_user: msg.sender_id === user.id\r\n      }))\r\n\r\n      currentMessages.value = messagesWithProfiles\r\n      return { success: true, data: currentMessages.value }\r\n    } catch (error: any) {\r\n      console.error('获取消息失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  return {\r\n    conversations,\r\n    currentMessages,\r\n    isLoading,\r\n    unreadCount,\r\n    fetchConversations,\r\n    fetchMessages,\r\n    fetchMessagesPaginated,\r\n    sendMessage,\r\n    markMessagesAsRead,\r\n    fetchUnreadCount,\r\n    deleteConversation,\r\n    deleteMessage,\r\n    searchUsers\r\n  }\r\n})"],"names":["withRetry","operation","maxRetries","delay","lastError","i","error","resolve","useMessageStore","defineStore","conversations","ref","currentMessages","isLoading","unreadCount","user","supabase","supabaseUrl","mockConversations","messages","messagesError","conversationMap","message","otherUserId","otherUserProfile","conversation","conversationsArray","value","conversationsList","a","b","timeA","handleSupabaseError","conversationId","mockMessages","convError","data","messagesWithProfiles","msg","page","limit","receiverId","content","senderId","rpcError","conv","_a","c","conversationUnreadCount","count","updateField","messageId","m","query"],"mappings":"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"}