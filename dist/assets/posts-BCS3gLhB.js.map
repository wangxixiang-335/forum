{"version":3,"mappings":"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","names":["usePostStore","defineStore","posts","ref","currentPost","isLoading","fetchPosts","page","limit","data","error","withRetry","supabase","handleSupabaseError","fetchPostById","postId","incrementViewCount","createPost","title","content","tags","useAuthStore","__vitePreload","authStore","_a","toggleLike","existingLike","checkError","deleteError","decrementError","insertError","incrementError","userId","parentId","post","commentId"],"ignoreList":[],"sources":["../../src/stores/posts.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { supabase, withRetry, handleSupabaseError } from '@/services/supabase'\r\nimport type { Database } from '@/types/supabase'\r\n\r\ntype Post = Database['public']['Tables']['posts']['Row'] & {\r\n  profiles: {\r\n    username: string\r\n    avatar_url: string | null\r\n    level: number\r\n  }\r\n  user_has_liked?: boolean\r\n}\r\n\r\nexport const usePostStore = defineStore('posts', () => {\r\n  const posts = ref<Post[]>([])\r\n  const currentPost = ref<Post | null>(null)\r\n  const isLoading = ref(false)\r\n\r\n  // 获取帖子列表\r\n  const fetchPosts = async (page = 1, limit = 20) => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .order('created_at', { ascending: false })\r\n          .range((page - 1) * limit, page * limit - 1)\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      if (data) {\r\n        posts.value = data as Post[]\r\n      }\r\n    } catch (error: any) {\r\n      console.error('获取帖子列表失败:', error)\r\n      throw handleSupabaseError(error)\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 获取单个帖子\r\n  const fetchPostById = async (postId: string) => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .eq('id', postId)\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      if (data) {\r\n        currentPost.value = data as Post\r\n        \r\n        // 增加浏览量\r\n        await incrementViewCount(postId)\r\n      }\r\n    } catch (error: any) {\r\n      console.error('获取帖子失败:', error)\r\n      throw handleSupabaseError(error)\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 创建帖子\r\n  const createPost = async (title: string, content: string, tags: string[] = []) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .insert({\r\n            user_id: authStore.user.id,\r\n            title,\r\n            content,\r\n            tags,\r\n            like_count: 0,\r\n            comment_count: 0,\r\n            view_count: 0,\r\n            is_pinned: false\r\n          })\r\n          .select()\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      // 增加用户经验值（发帖获得10点经验）\r\n      await supabase\r\n        .from('profiles')\r\n        .update({\r\n          experience_points: supabase.rpc('increment', { \r\n            x: authStore.profile?.experience_points || 0, \r\n            y: 10 \r\n          })\r\n        })\r\n        .eq('id', authStore.user.id)\r\n      \r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('创建帖子失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 点赞/取消点赞\r\n  const toggleLike = async (postId: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      // 检查是否已经点赞\r\n      const { data: existingLike, error: checkError } = await supabase\r\n        .from('interactions')\r\n        .select('id')\r\n        .eq('user_id', authStore.user.id)\r\n        .eq('target_type', 'post')\r\n        .eq('target_id', postId)\r\n        .eq('interaction_type', 'like')\r\n\r\n      if (checkError && checkError.code !== 'PGRST116') {\r\n        throw checkError\r\n      }\r\n\r\n      if (existingLike && existingLike.length > 0) {\r\n        // 取消点赞\r\n        const { error: deleteError } = await supabase\r\n          .from('interactions')\r\n          .delete()\r\n          .eq('user_id', authStore.user.id)\r\n          .eq('target_type', 'post')\r\n          .eq('target_id', postId)\r\n          .eq('interaction_type', 'like')\r\n        \r\n        if (deleteError) throw deleteError\r\n        \r\n        // 减少点赞数\r\n        const { error: decrementError } = await supabase.rpc('decrement_like_count', { post_id: postId })\r\n        if (decrementError) console.error('减少点赞数失败:', decrementError)\r\n      } else {\r\n        // 点赞\r\n        const { error: insertError } = await supabase\r\n          .from('interactions')\r\n          .insert({\r\n            user_id: authStore.user.id,\r\n            target_type: 'post',\r\n            target_id: postId,\r\n            interaction_type: 'like'\r\n          })\r\n        \r\n        // 如果是重复点赞错误，说明已经点赞过了，执行取消点赞逻辑\r\n        if (insertError && insertError.code === '23505') {\r\n          console.log('检测到重复点赞，执行取消点赞')\r\n          const { error: deleteError } = await supabase\r\n            .from('interactions')\r\n            .delete()\r\n            .eq('user_id', authStore.user.id)\r\n            .eq('target_type', 'post')\r\n            .eq('target_id', postId)\r\n            .eq('interaction_type', 'like')\r\n          \r\n          if (deleteError) throw deleteError\r\n          \r\n          // 减少点赞数\r\n          const { error: decrementError } = await supabase.rpc('decrement_like_count', { post_id: postId })\r\n          if (decrementError) console.error('减少点赞数失败:', decrementError)\r\n        } else if (insertError) {\r\n          throw insertError\r\n        } else {\r\n          // 增加点赞数\r\n          const { error: incrementError } = await supabase.rpc('increment_like_count', { post_id: postId })\r\n          if (incrementError) console.error('增加点赞数失败:', incrementError)\r\n        }\r\n      }\r\n\r\n      // 更新本地状态\r\n      await fetchPosts()\r\n      if (currentPost.value?.id === postId) {\r\n        await fetchPostById(postId)\r\n      }\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('点赞操作失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 增加浏览量\r\n  const incrementViewCount = async (postId: string) => {\r\n    try {\r\n      await supabase.rpc('increment_view_count', { post_id: postId })\r\n    } catch (error) {\r\n      console.error('增加浏览量失败:', error)\r\n    }\r\n  }\r\n\r\n  // 获取用户帖子\r\n  const fetchUserPosts = async (userId: string) => {\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .eq('user_id', userId)\r\n          .order('created_at', { ascending: false })\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('获取用户帖子失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 创建评论\r\n  const createComment = async (postId: string, content: string, parentId?: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('comments')\r\n          .insert({\r\n            post_id: postId,\r\n            user_id: authStore.user.id,\r\n            content,\r\n            parent_id: parentId\r\n          })\r\n          .select()\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      // 增加用户经验值（评论获得5点经验）\r\n      await supabase\r\n        .from('profiles')\r\n        .update({\r\n          experience_points: (authStore.profile?.experience_points || 0) + 5\r\n        })\r\n        .eq('id', authStore.user.id)\r\n      \r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('创建评论失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 删除帖子\r\n  const deletePost = async (postId: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .delete()\r\n          .eq('id', postId)\r\n          .eq('user_id', authStore.user.id)\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      // 从本地状态中移除帖子\r\n      posts.value = posts.value.filter(post => post.id !== postId)\r\n      if (currentPost.value?.id === postId) {\r\n        currentPost.value = null\r\n      }\r\n      \r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('删除帖子失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 删除评论\r\n  const deleteComment = async (commentId: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('comments')\r\n          .delete()\r\n          .eq('id', commentId)\r\n          .eq('user_id', authStore.user.id)\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('删除评论失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  return {\r\n    posts,\r\n    currentPost,\r\n    isLoading,\r\n    fetchPosts,\r\n    fetchPostById,\r\n    fetchUserPosts,\r\n    createPost,\r\n    createComment,\r\n    deletePost,\r\n    deleteComment,\r\n    toggleLike\r\n  }\r\n})"],"file":"assets/posts-BCS3gLhB.js"}