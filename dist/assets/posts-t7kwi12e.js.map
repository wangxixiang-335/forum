{"version":3,"mappings":"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","names":["usePostStore","defineStore","posts","ref","currentPost","isLoading","totalPosts","currentPage","pageSize","filters","fetchPosts","page","limit","customFilters","activeFilters","queryBuilder","supabase","applyFilters","applySorting","offset","data","error","count","withRetry","handleSupabaseError","timeFilter","getTimeFilter","timeRange","now","sortBy","updateFilters","newFilters","resetFilters","getPopularTags","tagCounts","post","_a","tag","b","fetchPostById","postId","incrementViewCount","createPost","title","content","tags","useAuthStore","__vitePreload","authStore","toggleLike","existingLike","checkError","deleteError","insertError","userId","topLevelComments","topLevelError","comment","replies","repliesError","commentId","totalPages","hasMore","parentId"],"ignoreList":[],"sources":["../../src/stores/posts.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { supabase, withRetry, handleSupabaseError } from '@/services/supabase'\r\nimport type { Database } from '@/types/supabase'\r\n\r\ntype Post = Database['public']['Tables']['posts']['Row'] & {\r\n  profiles: {\r\n    username: string\r\n    avatar_url: string | null\r\n    level: number\r\n  }\r\n  user_has_liked?: boolean\r\n}\r\n\r\ninterface PostFilters {\r\n  sortBy: 'newest' | 'oldest' | 'most_liked' | 'most_commented' | 'most_viewed'\r\n  timeRange: 'all' | 'today' | 'week' | 'month' | 'year'\r\n  tags?: string[]\r\n  authorId?: string\r\n}\r\n\r\nexport const usePostStore = defineStore('posts', () => {\r\n  const posts = ref<Post[]>([])\r\n  const currentPost = ref<Post | null>(null)\r\n  const isLoading = ref(false)\r\n  const totalPosts = ref(0)\r\n  const currentPage = ref(1)\r\n  const pageSize = ref(20)\r\n  const filters = ref<PostFilters>({\r\n    sortBy: 'newest',\r\n    timeRange: 'all',\r\n    tags: []\r\n  })\r\n\r\n  // 获取帖子列表\r\n  const fetchPosts = async (page = 1, limit = 20, customFilters?: PostFilters) => {\r\n    isLoading.value = true\r\n    currentPage.value = page\r\n    \r\n    try {\r\n      const activeFilters = customFilters || filters.value\r\n      let queryBuilder = supabase\r\n        .from('posts')\r\n        .select(`\r\n          *,\r\n          profiles:user_id (username, avatar_url, level)\r\n        `, { count: 'exact' })\r\n\r\n      // 应用过滤器\r\n      queryBuilder = applyFilters(queryBuilder, activeFilters)\r\n\r\n      // 应用排序\r\n      queryBuilder = applySorting(queryBuilder, activeFilters.sortBy)\r\n\r\n      // 应用分页\r\n      const offset = (page - 1) * limit\r\n      queryBuilder = queryBuilder.range(offset, offset + limit - 1)\r\n\r\n      const { data, error, count } = await withRetry(() => queryBuilder)\r\n\r\n      if (error) throw error\r\n      \r\n      if (data) {\r\n        posts.value = data as Post[]\r\n        totalPosts.value = count || 0\r\n      }\r\n    } catch (error: any) {\r\n      console.error('获取帖子列表失败:', error)\r\n      throw handleSupabaseError(error)\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 应用过滤器\r\n  const applyFilters = (queryBuilder: any, filters: PostFilters) => {\r\n    // 标签过滤\r\n    if (filters.tags && filters.tags.length > 0) {\r\n      queryBuilder = queryBuilder.contains('tags', filters.tags)\r\n    }\r\n\r\n    // 作者过滤\r\n    if (filters.authorId) {\r\n      queryBuilder = queryBuilder.eq('user_id', filters.authorId)\r\n    }\r\n\r\n    // 时间范围过滤\r\n    const timeFilter = getTimeFilter(filters.timeRange)\r\n    if (timeFilter) {\r\n      queryBuilder = queryBuilder.gte('created_at', timeFilter)\r\n    }\r\n\r\n    return queryBuilder\r\n  }\r\n\r\n  // 获取时间过滤器\r\n  const getTimeFilter = (timeRange: string) => {\r\n    const now = new Date()\r\n    switch (timeRange) {\r\n      case 'today':\r\n        return new Date(now.setHours(0, 0, 0, 0)).toISOString()\r\n      case 'week':\r\n        return new Date(now.setDate(now.getDate() - 7)).toISOString()\r\n      case 'month':\r\n        return new Date(now.setMonth(now.getMonth() - 1)).toISOString()\r\n      case 'year':\r\n        return new Date(now.setFullYear(now.getFullYear() - 1)).toISOString()\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  // 应用排序\r\n  const applySorting = (queryBuilder: any, sortBy: string) => {\r\n    switch (sortBy) {\r\n      case 'newest':\r\n        return queryBuilder.order('is_pinned', { ascending: false }).order('created_at', { ascending: false })\r\n      case 'oldest':\r\n        return queryBuilder.order('created_at', { ascending: true })\r\n      case 'most_liked':\r\n        return queryBuilder.order('like_count', { ascending: false }).order('created_at', { ascending: false })\r\n      case 'most_commented':\r\n        return queryBuilder.order('comment_count', { ascending: false }).order('created_at', { ascending: false })\r\n      case 'most_viewed':\r\n        return queryBuilder.order('view_count', { ascending: false }).order('created_at', { ascending: false })\r\n      default:\r\n        return queryBuilder.order('is_pinned', { ascending: false }).order('created_at', { ascending: false })\r\n    }\r\n  }\r\n\r\n  // 更新过滤器\r\n  const updateFilters = (newFilters: Partial<PostFilters>) => {\r\n    filters.value = { ...filters.value, ...newFilters }\r\n  }\r\n\r\n  // 重置过滤器\r\n  const resetFilters = () => {\r\n    filters.value = {\r\n      sortBy: 'newest',\r\n      timeRange: 'all',\r\n      tags: []\r\n    }\r\n  }\r\n\r\n  // 获取热门标签\r\n  const getPopularTags = async (limit = 20) => {\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select('tags')\r\n          .not('tags', 'eq', '{}')\r\n          .limit(1000)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 统计标签频率\r\n      const tagCounts: { [key: string]: number } = {}\r\n      data?.forEach(post => {\r\n        post.tags?.forEach(tag => {\r\n          tagCounts[tag] = (tagCounts[tag] || 0) + 1\r\n        })\r\n      })\r\n\r\n      // 排序并返回热门标签\r\n      const popularTags = Object.entries(tagCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, limit)\r\n        .map(([tag, count]) => ({ tag, count }))\r\n\r\n      return { success: true, data: popularTags }\r\n    } catch (error: any) {\r\n      console.error('获取热门标签失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 获取单个帖子\r\n  const fetchPostById = async (postId: string) => {\r\n    isLoading.value = true\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .eq('id', postId)\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      if (data) {\r\n        currentPost.value = data as Post\r\n        \r\n        // 增加浏览量\r\n        await incrementViewCount(postId)\r\n      }\r\n    } catch (error: any) {\r\n      console.error('获取帖子失败:', error)\r\n      throw handleSupabaseError(error)\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n  // 创建帖子\r\n  const createPost = async (title: string, content: string, tags: string[] = []) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .insert({\r\n            user_id: authStore.user.id,\r\n            title,\r\n            content,\r\n            tags,\r\n            like_count: 0,\r\n            comment_count: 0,\r\n            view_count: 0,\r\n            is_pinned: false\r\n          })\r\n          .select()\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      // 增加用户经验值（发帖获得10点经验）\r\n      await authStore.updateExperience(10)\r\n      \r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('创建帖子失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 点赞/取消点赞\r\n  const toggleLike = async (postId: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      console.log('toggleLike: 开始点赞操作', { postId, userId: authStore.user.id })\r\n      \r\n      // 检查是否已经点赞\r\n      const { data: existingLike, error: checkError } = await supabase\r\n        .from('interactions')\r\n        .select('id')\r\n        .eq('user_id', authStore.user.id)\r\n        .eq('target_type', 'post')\r\n        .eq('target_id', postId)\r\n        .eq('interaction_type', 'like')\r\n\r\n      if (checkError && checkError.code !== 'PGRST116') {\r\n        throw checkError\r\n      }\r\n\r\n      console.log('toggleLike: 现有点赞记录', existingLike)\r\n\r\n      if (existingLike && existingLike.length > 0) {\r\n        // 取消点赞\r\n        console.log('toggleLike: 执行取消点赞')\r\n        const { error: deleteError } = await supabase\r\n          .from('interactions')\r\n          .delete()\r\n          .eq('user_id', authStore.user.id)\r\n          .eq('target_type', 'post')\r\n          .eq('target_id', postId)\r\n          .eq('interaction_type', 'like')\r\n        \r\n        if (deleteError) throw deleteError\r\n        console.log('toggleLike: 取消点赞成功')\r\n      } else {\r\n        // 点赞\r\n        console.log('toggleLike: 执行点赞')\r\n        const { error: insertError } = await supabase\r\n          .from('interactions')\r\n          .insert({\r\n            user_id: authStore.user.id,\r\n            target_type: 'post',\r\n            target_id: postId,\r\n            interaction_type: 'like'\r\n          })\r\n        \r\n        // 如果是重复点赞错误，说明已经点赞过了，执行取消点赞逻辑\r\n        if (insertError && insertError.code === '23505') {\r\n          console.log('toggleLike: 检测到重复点赞，执行取消点赞')\r\n          const { error: deleteError } = await supabase\r\n            .from('interactions')\r\n            .delete()\r\n            .eq('user_id', authStore.user.id)\r\n            .eq('target_type', 'post')\r\n            .eq('target_id', postId)\r\n            .eq('interaction_type', 'like')\r\n          \r\n          if (deleteError) throw deleteError\r\n          console.log('toggleLike: 重复点赞处理完成')\r\n        } else if (insertError) {\r\n          throw insertError\r\n        } else {\r\n          console.log('toggleLike: 点赞成功')\r\n        }\r\n      }\r\n\r\n      // 更新本地状态\r\n      await fetchPosts()\r\n      if (currentPost.value?.id === postId) {\r\n        await fetchPostById(postId)\r\n      }\r\n\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('点赞操作失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 增加浏览量\r\n  const incrementViewCount = async (postId: string) => {\r\n    try {\r\n      await supabase.rpc('increment_view_count', { post_id: postId })\r\n    } catch (error) {\r\n      console.error('增加浏览量失败:', error)\r\n    }\r\n  }\r\n\r\n  // 获取用户帖子\r\n  const fetchUserPosts = async (userId: string) => {\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .eq('user_id', userId)\r\n          .order('created_at', { ascending: false })\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('获取用户帖子失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 获取评论及其回复\r\n  const fetchCommentsWithReplies = async (postId: string, page = 1, limit = 20) => {\r\n    try {\r\n      // 获取顶级评论（没有parent_id的评论）\r\n      const { data: topLevelComments, error: topLevelError } = await withRetry(() =>\r\n        supabase\r\n          .from('comments')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .eq('post_id', postId)\r\n          .is('parent_id', null)\r\n          .order('is_pinned', { ascending: false })\r\n          .order('created_at', { ascending: false })\r\n          .range((page - 1) * limit, page * limit - 1)\r\n      )\r\n\r\n      if (topLevelError) throw topLevelError\r\n\r\n      // 为每个顶级评论获取回复\r\n      const commentsWithReplies = await Promise.all(\r\n        (topLevelComments || []).map(async (comment) => {\r\n          const { data: replies, error: repliesError } = await withRetry(() =>\r\n            supabase\r\n              .from('comments')\r\n              .select(`\r\n                *,\r\n                profiles:user_id (username, avatar_url, level)\r\n              `)\r\n              .eq('parent_id', comment.id)\r\n              .order('created_at', { ascending: false })\r\n              .limit(5) // 限制回复数量，可以添加\"加载更多\"功能\r\n          )\r\n\r\n          if (repliesError) {\r\n            console.warn('获取评论回复失败:', repliesError)\r\n            return { ...comment, replies: [] }\r\n          }\r\n\r\n          return { ...comment, replies: replies || [] }\r\n        })\r\n      )\r\n\r\n      return { success: true, data: commentsWithReplies }\r\n    } catch (error: any) {\r\n      console.error('获取评论失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 获取评论回复\r\n  const fetchCommentReplies = async (commentId: string, page = 1, limit = 10) => {\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('comments')\r\n          .select(`\r\n            *,\r\n            profiles:user_id (username, avatar_url, level)\r\n          `)\r\n          .eq('parent_id', commentId)\r\n          .order('created_at', { ascending: false })\r\n          .range((page - 1) * limit, page * limit - 1)\r\n      )\r\n\r\n      if (error) throw error\r\n\r\n      // 获取总数以计算是否有更多回复\r\n      const { count } = await supabase\r\n        .from('comments')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('parent_id', commentId)\r\n\r\n      const totalPages = Math.ceil((count || 0) / limit)\r\n      const hasMore = page < totalPages\r\n\r\n      return { \r\n        success: true, \r\n        data: data || [], \r\n        hasMore,\r\n        currentPage: page,\r\n        totalPages\r\n      }\r\n    } catch (error: any) {\r\n      console.error('获取评论回复失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 创建评论\r\n  const createComment = async (postId: string, content: string, parentId?: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await withRetry(() =>\r\n        supabase\r\n          .from('comments')\r\n          .insert({\r\n            post_id: postId,\r\n            user_id: authStore.user.id,\r\n            content,\r\n            parent_id: parentId\r\n          })\r\n          .select()\r\n          .single()\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      // 增加用户经验值（评论获得5点经验）\r\n      await authStore.updateExperience(5)\r\n      \r\n      return { success: true, data }\r\n    } catch (error: any) {\r\n      console.error('创建评论失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 删除帖子\r\n  const deletePost = async (postId: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('posts')\r\n          .delete()\r\n          .eq('id', postId)\r\n          .eq('user_id', authStore.user.id)\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      // 从本地状态中移除帖子\r\n      posts.value = posts.value.filter(post => post.id !== postId)\r\n      if (currentPost.value?.id === postId) {\r\n        currentPost.value = null\r\n      }\r\n      \r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('删除帖子失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  // 删除评论\r\n  const deleteComment = async (commentId: string) => {\r\n    const { useAuthStore } = await import('@/stores/auth')\r\n    const authStore = useAuthStore()\r\n    \r\n    if (!authStore.user) {\r\n      throw new Error('请先登录')\r\n    }\r\n\r\n    try {\r\n      const { error } = await withRetry(() =>\r\n        supabase\r\n          .from('comments')\r\n          .delete()\r\n          .eq('id', commentId)\r\n          .eq('user_id', authStore.user.id)\r\n      )\r\n\r\n      if (error) throw error\r\n      \r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('删除评论失败:', error)\r\n      return { success: false, error: handleSupabaseError(error) }\r\n    }\r\n  }\r\n\r\n  return {\r\n    posts,\r\n    currentPost,\r\n    isLoading,\r\n    totalPosts,\r\n    currentPage,\r\n    pageSize,\r\n    filters,\r\n    fetchPosts,\r\n    fetchPostById,\r\n    fetchUserPosts,\r\n    fetchCommentsWithReplies,\r\n    fetchCommentReplies,\r\n    createPost,\r\n    createComment,\r\n    deletePost,\r\n    deleteComment,\r\n    toggleLike,\r\n    updateFilters,\r\n    resetFilters,\r\n    getPopularTags\r\n  }\r\n})"],"file":"assets/posts-t7kwi12e.js"}